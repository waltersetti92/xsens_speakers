
//  ==> COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE <==
//  WARNING: COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO AN END USER LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  
//  THIS SOFTWARE CAN CONTAIN OPEN SOURCE COMPONENTS WHICH CAN BE SUBJECT TO 
//  THE FOLLOWING GENERAL PUBLIC LICENSES:
//  ==> Qt GNU LGPL version 3: http://doc.qt.io/qt-5/lgpl.html <==
//  ==> LAPACK BSD License:  http://www.netlib.org/lapack/LICENSE.txt <==
//  ==> StackWalker 3-Clause BSD License: https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE <==
//  ==> Icon Creative Commons 3.0: https://creativecommons.org/licenses/by/3.0/legalcode <==
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsRawGnssPvtData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsRawGnssPvtData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsRawGnssPvtData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsRawGnssPvtData() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsRawGnssPvtData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint m_itow {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_itow_set(swigCPtr, value);
    } 
    get {
      uint ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_itow_get(swigCPtr);
      return ret;
    } 
  }

  public ushort m_year {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_year_set(swigCPtr, value);
    } 
    get {
      ushort ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_year_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_month {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_month_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_month_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_day {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_day_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_day_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_hour {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_hour_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_hour_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_min {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_min_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_min_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_sec {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_sec_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_sec_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_valid {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_valid_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_valid_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_tAcc {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_tAcc_set(swigCPtr, value);
    } 
    get {
      uint ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_tAcc_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nano {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_nano_set(swigCPtr, value);
    } 
    get {
      int ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_nano_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_fixType {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_fixType_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_fixType_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_flags {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_flags_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_flags_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_numSv {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_numSv_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_numSv_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_res1 {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_res1_set(swigCPtr, value);
    } 
    get {
      byte ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_res1_get(swigCPtr);
      return ret;
    } 
  }

  public int m_lon {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_lon_set(swigCPtr, value);
    } 
    get {
      int ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_lon_get(swigCPtr);
      return ret;
    } 
  }

  public int m_lat {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_lat_set(swigCPtr, value);
    } 
    get {
      int ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_lat_get(swigCPtr);
      return ret;
    } 
  }

  public int m_height {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_height_set(swigCPtr, value);
    } 
    get {
      int ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_height_get(swigCPtr);
      return ret;
    } 
  }

  public int m_hMsl {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_hMsl_set(swigCPtr, value);
    } 
    get {
      int ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_hMsl_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_hAcc {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_hAcc_set(swigCPtr, value);
    } 
    get {
      uint ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_hAcc_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_vAcc {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_vAcc_set(swigCPtr, value);
    } 
    get {
      uint ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_vAcc_get(swigCPtr);
      return ret;
    } 
  }

  public int m_velN {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_velN_set(swigCPtr, value);
    } 
    get {
      int ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_velN_get(swigCPtr);
      return ret;
    } 
  }

  public int m_velE {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_velE_set(swigCPtr, value);
    } 
    get {
      int ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_velE_get(swigCPtr);
      return ret;
    } 
  }

  public int m_velD {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_velD_set(swigCPtr, value);
    } 
    get {
      int ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_velD_get(swigCPtr);
      return ret;
    } 
  }

  public int m_gSpeed {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_gSpeed_set(swigCPtr, value);
    } 
    get {
      int ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_gSpeed_get(swigCPtr);
      return ret;
    } 
  }

  public int m_headMot {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_headMot_set(swigCPtr, value);
    } 
    get {
      int ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_headMot_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_sAcc {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_sAcc_set(swigCPtr, value);
    } 
    get {
      uint ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_sAcc_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_headAcc {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_headAcc_set(swigCPtr, value);
    } 
    get {
      uint ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_headAcc_get(swigCPtr);
      return ret;
    } 
  }

  public int m_headVeh {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_headVeh_set(swigCPtr, value);
    } 
    get {
      int ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_headVeh_get(swigCPtr);
      return ret;
    } 
  }

  public ushort m_gdop {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_gdop_set(swigCPtr, value);
    } 
    get {
      ushort ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_gdop_get(swigCPtr);
      return ret;
    } 
  }

  public ushort m_pdop {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_pdop_set(swigCPtr, value);
    } 
    get {
      ushort ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_pdop_get(swigCPtr);
      return ret;
    } 
  }

  public ushort m_tdop {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_tdop_set(swigCPtr, value);
    } 
    get {
      ushort ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_tdop_get(swigCPtr);
      return ret;
    } 
  }

  public ushort m_vdop {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_vdop_set(swigCPtr, value);
    } 
    get {
      ushort ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_vdop_get(swigCPtr);
      return ret;
    } 
  }

  public ushort m_hdop {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_hdop_set(swigCPtr, value);
    } 
    get {
      ushort ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_hdop_get(swigCPtr);
      return ret;
    } 
  }

  public ushort m_ndop {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_ndop_set(swigCPtr, value);
    } 
    get {
      ushort ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_ndop_get(swigCPtr);
      return ret;
    } 
  }

  public ushort m_edop {
    set {
      xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_edop_set(swigCPtr, value);
    } 
    get {
      ushort ret = xsensdeviceapiPINVOKE.XsRawGnssPvtData_m_edop_get(swigCPtr);
      return ret;
    } 
  }

  public XsRawGnssPvtData() : this(xsensdeviceapiPINVOKE.new_XsRawGnssPvtData(), true) {
  }

}

}
