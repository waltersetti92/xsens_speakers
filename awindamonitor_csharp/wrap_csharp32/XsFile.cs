
//  ==> COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE <==
//  WARNING: COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO AN END USER LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  
//  THIS SOFTWARE CAN CONTAIN OPEN SOURCE COMPONENTS WHICH CAN BE SUBJECT TO 
//  THE FOLLOWING GENERAL PUBLIC LICENSES:
//  ==> Qt GNU LGPL version 3: http://doc.qt.io/qt-5/lgpl.html <==
//  ==> LAPACK BSD License:  http://www.netlib.org/lapack/LICENSE.txt <==
//  ==> StackWalker 3-Clause BSD License: https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE <==
//  ==> Icon Creative Commons 3.0: https://creativecommons.org/licenses/by/3.0/legalcode <==
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsFile : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsFile(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsFile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsFile() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsFile(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public XsFile() : this(xsensdeviceapiPINVOKE.new_XsFile(), true) {
  }

  public XsResultValue create(XsString filename, bool writeOnly) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_create(swigCPtr, XsString.getCPtr(filename), writeOnly);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsResultValue createText(XsString filename, bool writeOnly) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_createText(swigCPtr, XsString.getCPtr(filename), writeOnly);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsResultValue open(XsString fileName, bool readOnly) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_open(swigCPtr, XsString.getCPtr(fileName), readOnly);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsResultValue openText(XsString fileName, bool readOnly) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_openText(swigCPtr, XsString.getCPtr(fileName), readOnly);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsResultValue reopen(XsString fileName, XsString mode) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_reopen(swigCPtr, XsString.getCPtr(fileName), XsString.getCPtr(mode));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isOpen() {
    bool ret = xsensdeviceapiPINVOKE.XsFile_isOpen(swigCPtr);
    return ret;
  }

  public static bool exists(XsString fileName) {
    bool ret = xsensdeviceapiPINVOKE.XsFile_exists(XsString.getCPtr(fileName));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsResultValue close() {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_close(swigCPtr);
    return ret;
  }

  public XsResultValue flush() {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_flush(swigCPtr);
    return ret;
  }

  public XsResultValue truncate(SWIGTYPE_p___int64 fileSize) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_truncate(swigCPtr, SWIGTYPE_p___int64.getCPtr(fileSize));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsResultValue resize(SWIGTYPE_p___int64 fileSize) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_resize(swigCPtr, SWIGTYPE_p___int64.getCPtr(fileSize));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XsResultValue erase(XsString filename) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_erase(XsString.getCPtr(filename));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p___int64 read(SWIGTYPE_p_void destination, SWIGTYPE_p___int64 size, SWIGTYPE_p___int64 count) {
    SWIGTYPE_p___int64 ret = new SWIGTYPE_p___int64(xsensdeviceapiPINVOKE.XsFile_read(swigCPtr, SWIGTYPE_p_void.getCPtr(destination), SWIGTYPE_p___int64.getCPtr(size), SWIGTYPE_p___int64.getCPtr(count)), true);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p___int64 write(SWIGTYPE_p_void source, SWIGTYPE_p___int64 size, SWIGTYPE_p___int64 count) {
    SWIGTYPE_p___int64 ret = new SWIGTYPE_p___int64(xsensdeviceapiPINVOKE.XsFile_write__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(source), SWIGTYPE_p___int64.getCPtr(size), SWIGTYPE_p___int64.getCPtr(count)), true);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p___int64 write(XsByteArray source) {
    SWIGTYPE_p___int64 ret = new SWIGTYPE_p___int64(xsensdeviceapiPINVOKE.XsFile_write__SWIG_1(swigCPtr, XsByteArray.getCPtr(source)), true);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getc() {
    int ret = xsensdeviceapiPINVOKE.XsFile_getc(swigCPtr);
    return ret;
  }

  public XsResultValue putc(int character) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_putc(swigCPtr, character);
    return ret;
  }

  public string gets(ref string destination, int maxCount) {
    string ret = xsensdeviceapiPINVOKE.XsFile_gets(swigCPtr, ref destination, maxCount);
    return ret;
  }

  public XsResultValue puts(string source) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_puts(swigCPtr, source);
    return ret;
  }

  public XsResultValue seek(SWIGTYPE_p___int64 offset) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_seek(swigCPtr, SWIGTYPE_p___int64.getCPtr(offset));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsResultValue seek_r(SWIGTYPE_p___int64 offset) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_seek_r(swigCPtr, SWIGTYPE_p___int64.getCPtr(offset));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p___int64 tell() {
    SWIGTYPE_p___int64 ret = new SWIGTYPE_p___int64(xsensdeviceapiPINVOKE.XsFile_tell(swigCPtr), true);
    return ret;
  }

  public bool eof() {
    bool ret = xsensdeviceapiPINVOKE.XsFile_eof(swigCPtr);
    return ret;
  }

  public XsResultValue error() {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_error(swigCPtr);
    return ret;
  }

  public static XsResultValue fullPath(XsString filename, XsString fullPath) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_fullPath(XsString.getCPtr(filename), XsString.getCPtr(fullPath));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsResultValue getline(XsString line) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_getline__SWIG_0(swigCPtr, XsString.getCPtr(line));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsResultValue getline(SWIGTYPE_p_std__string line) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsFile_getline__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(line));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_FILE handle() {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsFile_handle(swigCPtr);
    SWIGTYPE_p_FILE ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FILE(cPtr, false);
    return ret;
  }

}

}
