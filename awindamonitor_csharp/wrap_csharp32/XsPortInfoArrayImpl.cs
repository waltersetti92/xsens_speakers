
//  ==> COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE <==
//  WARNING: COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO AN END USER LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  
//  THIS SOFTWARE CAN CONTAIN OPEN SOURCE COMPONENTS WHICH CAN BE SUBJECT TO 
//  THE FOLLOWING GENERAL PUBLIC LICENSES:
//  ==> Qt GNU LGPL version 3: http://doc.qt.io/qt-5/lgpl.html <==
//  ==> LAPACK BSD License:  http://www.netlib.org/lapack/LICENSE.txt <==
//  ==> StackWalker 3-Clause BSD License: https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE <==
//  ==> Icon Creative Commons 3.0: https://creativecommons.org/licenses/by/3.0/legalcode <==
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsPortInfoArrayImpl : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsPortInfoArrayImpl(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsPortInfoArrayImpl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsPortInfoArrayImpl() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsPortInfoArrayImpl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public XsPortInfoArrayImpl(uint count, XsPortInfo src) : this(xsensdeviceapiPINVOKE.new_XsPortInfoArrayImpl__SWIG_0(count, XsPortInfo.getCPtr(src)), true) {
  }

  public XsPortInfoArrayImpl(uint count) : this(xsensdeviceapiPINVOKE.new_XsPortInfoArrayImpl__SWIG_1(count), true) {
  }

  public XsPortInfoArrayImpl() : this(xsensdeviceapiPINVOKE.new_XsPortInfoArrayImpl__SWIG_2(), true) {
  }

  public XsPortInfoArrayImpl(XsPortInfoArrayImpl other) : this(xsensdeviceapiPINVOKE.new_XsPortInfoArrayImpl__SWIG_3(XsPortInfoArrayImpl.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsPortInfoArrayImpl(XsPortInfo ref_, uint sz, XsDataFlags flags) : this(xsensdeviceapiPINVOKE.new_XsPortInfoArrayImpl__SWIG_4(XsPortInfo.getCPtr(ref_), sz, (int)flags), true) {
  }

  public void clear() {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_clear(swigCPtr);
  }

  public void reserve(uint count) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_reserve(swigCPtr, count);
  }

  public uint reserved() {
    uint ret = xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_reserved(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_XsArrayDescriptor descriptor() {
    SWIGTYPE_p_XsArrayDescriptor ret = new SWIGTYPE_p_XsArrayDescriptor(xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_descriptor(swigCPtr), false);
    return ret;
  }

  public XsPortInfo value(uint index) {
    XsPortInfo ret = new XsPortInfo(xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_value(swigCPtr, index), true);
    return ret;
  }

  public XsPortInfo first() {
    XsPortInfo ret = new XsPortInfo(xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_first(swigCPtr), true);
    return ret;
  }

  public XsPortInfo last() {
    XsPortInfo ret = new XsPortInfo(xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_last(swigCPtr), true);
    return ret;
  }

  public XsPortInfo at(uint index) {
    XsPortInfo ret = new XsPortInfo(xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_at__SWIG_0(swigCPtr, index), false);
    return ret;
  }

  public void insert(XsPortInfo item, uint index) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_insert__SWIG_0(swigCPtr, XsPortInfo.getCPtr(item), index);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void insert(XsPortInfo items, uint index, uint count) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_insert__SWIG_1(swigCPtr, XsPortInfo.getCPtr(items), index, count);
  }

  public void push_back(XsPortInfo item) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_push_back(swigCPtr, XsPortInfo.getCPtr(item));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pop_back(uint count) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_pop_back__SWIG_0(swigCPtr, count);
  }

  public void pop_back() {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_pop_back__SWIG_1(swigCPtr);
  }

  public void push_front(XsPortInfo item) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_push_front(swigCPtr, XsPortInfo.getCPtr(item));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pop_front(uint count) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_pop_front__SWIG_0(swigCPtr, count);
  }

  public void pop_front() {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_pop_front__SWIG_1(swigCPtr);
  }

  public uint size() {
    uint ret = xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_size(swigCPtr);
    return ret;
  }

  public void erase(uint index, uint count) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_erase__SWIG_0(swigCPtr, index, count);
  }

  public void erase(uint index) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_erase__SWIG_1(swigCPtr, index);
  }

  public void assign(uint count, XsPortInfo src) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_assign(swigCPtr, count, XsPortInfo.getCPtr(src));
  }

  public void resize(uint count) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_resize(swigCPtr, count);
  }

  public void setSize(uint count) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_setSize(swigCPtr, count);
  }

  public void append(XsPortInfoArrayImpl other) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_append(swigCPtr, XsPortInfoArrayImpl.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_empty(swigCPtr);
    return ret;
  }

  public void swap(XsPortInfoArrayImpl other) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_swap__SWIG_0(swigCPtr, XsPortInfoArrayImpl.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void swap(uint a, uint b) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_swap__SWIG_1(swigCPtr, a, b);
  }

  public SWIGTYPE_p_ptrdiff_t find(XsPortInfo needle) {
    SWIGTYPE_p_ptrdiff_t ret = new SWIGTYPE_p_ptrdiff_t(xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_find(swigCPtr, XsPortInfo.getCPtr(needle)), true);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeDuplicates() {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_removeDuplicates(swigCPtr);
  }

  public void removeDuplicatesPredicate(SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int predicate) {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_removeDuplicatesPredicate(swigCPtr, SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int.getCPtr(predicate));
  }

  public void sort() {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_sort(swigCPtr);
  }

  public void reverse() {
    xsensdeviceapiPINVOKE.XsPortInfoArrayImpl_reverse(swigCPtr);
  }

}

}
