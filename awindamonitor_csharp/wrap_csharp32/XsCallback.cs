
//  ==> COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE <==
//  WARNING: COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO AN END USER LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  
//  THIS SOFTWARE CAN CONTAIN OPEN SOURCE COMPONENTS WHICH CAN BE SUBJECT TO 
//  THE FOLLOWING GENERAL PUBLIC LICENSES:
//  ==> Qt GNU LGPL version 3: http://doc.qt.io/qt-5/lgpl.html <==
//  ==> LAPACK BSD License:  http://www.netlib.org/lapack/LICENSE.txt <==
//  ==> StackWalker 3-Clause BSD License: https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE <==
//  ==> Icon Creative Commons 3.0: https://creativecommons.org/licenses/by/3.0/legalcode <==
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsCallback : XsCallbackPlainC {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal XsCallback(global::System.IntPtr cPtr, bool cMemoryOwn) : base(xsensdeviceapiPINVOKE.XsCallback_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public XsCallback() : this(xsensdeviceapiPINVOKE.new_XsCallback(), true) {
    SwigDirectorConnect();
  }

  protected virtual void onDeviceStateChanged(XsDevice dev, XsDeviceState newState, XsDeviceState oldState) {
    if (SwigDerivedClassHasMethod("onDeviceStateChanged", swigMethodTypes0)) xsensdeviceapiPINVOKE.XsCallback_onDeviceStateChangedSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), (int)newState, (int)oldState); else xsensdeviceapiPINVOKE.XsCallback_onDeviceStateChanged(swigCPtr, XsDevice.getCPtr(dev), (int)newState, (int)oldState);
  }

  protected virtual void onLiveDataAvailable(XsDevice dev, XsDataPacket packet) {
    if (SwigDerivedClassHasMethod("onLiveDataAvailable", swigMethodTypes1)) xsensdeviceapiPINVOKE.XsCallback_onLiveDataAvailableSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet)); else xsensdeviceapiPINVOKE.XsCallback_onLiveDataAvailable(swigCPtr, XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet));
  }

  protected virtual void onMissedPackets(XsDevice dev, int count, int first, int last) {
    if (SwigDerivedClassHasMethod("onMissedPackets", swigMethodTypes2)) xsensdeviceapiPINVOKE.XsCallback_onMissedPacketsSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), count, first, last); else xsensdeviceapiPINVOKE.XsCallback_onMissedPackets(swigCPtr, XsDevice.getCPtr(dev), count, first, last);
  }

  protected virtual void onWakeupReceived(XsDevice dev) {
    if (SwigDerivedClassHasMethod("onWakeupReceived", swigMethodTypes3)) xsensdeviceapiPINVOKE.XsCallback_onWakeupReceivedSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev)); else xsensdeviceapiPINVOKE.XsCallback_onWakeupReceived(swigCPtr, XsDevice.getCPtr(dev));
  }

  protected virtual void onProgressUpdated(XsDevice dev, int current, int total, XsString identifier) {
    if (SwigDerivedClassHasMethod("onProgressUpdated", swigMethodTypes4)) xsensdeviceapiPINVOKE.XsCallback_onProgressUpdatedSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), current, total, XsString.getCPtr(identifier)); else xsensdeviceapiPINVOKE.XsCallback_onProgressUpdated(swigCPtr, XsDevice.getCPtr(dev), current, total, XsString.getCPtr(identifier));
  }

  protected virtual int onWriteMessageToLogFile(XsDevice dev, XsMessage message) {
    int ret = (SwigDerivedClassHasMethod("onWriteMessageToLogFile", swigMethodTypes5) ? xsensdeviceapiPINVOKE.XsCallback_onWriteMessageToLogFileSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), XsMessage.getCPtr(message)) : xsensdeviceapiPINVOKE.XsCallback_onWriteMessageToLogFile(swigCPtr, XsDevice.getCPtr(dev), XsMessage.getCPtr(message)));
    return ret;
  }

  protected virtual void onBufferedDataAvailable(XsDevice dev, XsDataPacket packet) {
    if (SwigDerivedClassHasMethod("onBufferedDataAvailable", swigMethodTypes6)) xsensdeviceapiPINVOKE.XsCallback_onBufferedDataAvailableSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet)); else xsensdeviceapiPINVOKE.XsCallback_onBufferedDataAvailable(swigCPtr, XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet));
  }

  protected virtual void onConnectivityChanged(XsDevice dev, XsConnectivityState newState) {
    if (SwigDerivedClassHasMethod("onConnectivityChanged", swigMethodTypes7)) xsensdeviceapiPINVOKE.XsCallback_onConnectivityChangedSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), (int)newState); else xsensdeviceapiPINVOKE.XsCallback_onConnectivityChanged(swigCPtr, XsDevice.getCPtr(dev), (int)newState);
  }

  protected virtual void onInfoResponse(XsDevice dev, XsInfoRequest request) {
    if (SwigDerivedClassHasMethod("onInfoResponse", swigMethodTypes8)) xsensdeviceapiPINVOKE.XsCallback_onInfoResponseSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), (int)request); else xsensdeviceapiPINVOKE.XsCallback_onInfoResponse(swigCPtr, XsDevice.getCPtr(dev), (int)request);
  }

  protected virtual void onError(XsDevice dev, XsResultValue error) {
    if (SwigDerivedClassHasMethod("onError", swigMethodTypes9)) xsensdeviceapiPINVOKE.XsCallback_onErrorSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), (int)error); else xsensdeviceapiPINVOKE.XsCallback_onError(swigCPtr, XsDevice.getCPtr(dev), (int)error);
  }

  protected virtual void onNonDataMessage(XsDevice dev, XsMessage message) {
    if (SwigDerivedClassHasMethod("onNonDataMessage", swigMethodTypes10)) xsensdeviceapiPINVOKE.XsCallback_onNonDataMessageSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), XsMessage.getCPtr(message)); else xsensdeviceapiPINVOKE.XsCallback_onNonDataMessage(swigCPtr, XsDevice.getCPtr(dev), XsMessage.getCPtr(message));
  }

  protected virtual void onMessageDetected(XsDevice dev, XsProtocolType type, XsByteArray rawMessage) {
    if (SwigDerivedClassHasMethod("onMessageDetected", swigMethodTypes11)) xsensdeviceapiPINVOKE.XsCallback_onMessageDetectedSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), (int)type, XsByteArray.getCPtr(rawMessage)); else xsensdeviceapiPINVOKE.XsCallback_onMessageDetected(swigCPtr, XsDevice.getCPtr(dev), (int)type, XsByteArray.getCPtr(rawMessage));
  }

  protected virtual void onMessageReceivedFromDevice(XsDevice dev, XsMessage message) {
    if (SwigDerivedClassHasMethod("onMessageReceivedFromDevice", swigMethodTypes12)) xsensdeviceapiPINVOKE.XsCallback_onMessageReceivedFromDeviceSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), XsMessage.getCPtr(message)); else xsensdeviceapiPINVOKE.XsCallback_onMessageReceivedFromDevice(swigCPtr, XsDevice.getCPtr(dev), XsMessage.getCPtr(message));
  }

  protected virtual void onMessageSentToDevice(XsDevice dev, XsMessage message) {
    if (SwigDerivedClassHasMethod("onMessageSentToDevice", swigMethodTypes13)) xsensdeviceapiPINVOKE.XsCallback_onMessageSentToDeviceSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), XsMessage.getCPtr(message)); else xsensdeviceapiPINVOKE.XsCallback_onMessageSentToDevice(swigCPtr, XsDevice.getCPtr(dev), XsMessage.getCPtr(message));
  }

  protected virtual void onAllLiveDataAvailable(XsDevicePtrArray devs, XsDataPacketPtrArray packets) {
    if (SwigDerivedClassHasMethod("onAllLiveDataAvailable", swigMethodTypes14)) xsensdeviceapiPINVOKE.XsCallback_onAllLiveDataAvailableSwigExplicitXsCallback(swigCPtr, XsDevicePtrArray.getCPtr(devs), XsDataPacketPtrArray.getCPtr(packets)); else xsensdeviceapiPINVOKE.XsCallback_onAllLiveDataAvailable(swigCPtr, XsDevicePtrArray.getCPtr(devs), XsDataPacketPtrArray.getCPtr(packets));
  }

  protected virtual void onAllBufferedDataAvailable(XsDevicePtrArray devs, XsDataPacketPtrArray packets) {
    if (SwigDerivedClassHasMethod("onAllBufferedDataAvailable", swigMethodTypes15)) xsensdeviceapiPINVOKE.XsCallback_onAllBufferedDataAvailableSwigExplicitXsCallback(swigCPtr, XsDevicePtrArray.getCPtr(devs), XsDataPacketPtrArray.getCPtr(packets)); else xsensdeviceapiPINVOKE.XsCallback_onAllBufferedDataAvailable(swigCPtr, XsDevicePtrArray.getCPtr(devs), XsDataPacketPtrArray.getCPtr(packets));
  }

  protected virtual void onDataUnavailable(XsDevice dev, long packetId) {
    if (SwigDerivedClassHasMethod("onDataUnavailable", swigMethodTypes16)) xsensdeviceapiPINVOKE.XsCallback_onDataUnavailableSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), packetId); else xsensdeviceapiPINVOKE.XsCallback_onDataUnavailable(swigCPtr, XsDevice.getCPtr(dev), packetId);
  }

  protected virtual void onDataAvailable(XsDevice dev, XsDataPacket packet) {
    if (SwigDerivedClassHasMethod("onDataAvailable", swigMethodTypes17)) xsensdeviceapiPINVOKE.XsCallback_onDataAvailableSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet)); else xsensdeviceapiPINVOKE.XsCallback_onDataAvailable(swigCPtr, XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet));
  }

  protected virtual void onAllDataAvailable(XsDevicePtrArray devs, XsDataPacketPtrArray packets) {
    if (SwigDerivedClassHasMethod("onAllDataAvailable", swigMethodTypes18)) xsensdeviceapiPINVOKE.XsCallback_onAllDataAvailableSwigExplicitXsCallback(swigCPtr, XsDevicePtrArray.getCPtr(devs), XsDataPacketPtrArray.getCPtr(packets)); else xsensdeviceapiPINVOKE.XsCallback_onAllDataAvailable(swigCPtr, XsDevicePtrArray.getCPtr(devs), XsDataPacketPtrArray.getCPtr(packets));
  }

  protected virtual void onRecordedDataAvailable(XsDevice dev, XsDataPacket packet) {
    if (SwigDerivedClassHasMethod("onRecordedDataAvailable", swigMethodTypes19)) xsensdeviceapiPINVOKE.XsCallback_onRecordedDataAvailableSwigExplicitXsCallback(swigCPtr, XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet)); else xsensdeviceapiPINVOKE.XsCallback_onRecordedDataAvailable(swigCPtr, XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet));
  }

  protected virtual void onAllRecordedDataAvailable(XsDevicePtrArray devs, XsDataPacketPtrArray packets) {
    if (SwigDerivedClassHasMethod("onAllRecordedDataAvailable", swigMethodTypes20)) xsensdeviceapiPINVOKE.XsCallback_onAllRecordedDataAvailableSwigExplicitXsCallback(swigCPtr, XsDevicePtrArray.getCPtr(devs), XsDataPacketPtrArray.getCPtr(packets)); else xsensdeviceapiPINVOKE.XsCallback_onAllRecordedDataAvailable(swigCPtr, XsDevicePtrArray.getCPtr(devs), XsDataPacketPtrArray.getCPtr(packets));
  }

  protected virtual void onTransmissionRequest(int channelId, XsByteArray data) {
    if (SwigDerivedClassHasMethod("onTransmissionRequest", swigMethodTypes21)) xsensdeviceapiPINVOKE.XsCallback_onTransmissionRequestSwigExplicitXsCallback(swigCPtr, channelId, XsByteArray.getCPtr(data)); else xsensdeviceapiPINVOKE.XsCallback_onTransmissionRequest(swigCPtr, channelId, XsByteArray.getCPtr(data));
  }

  protected virtual void onRestoreCommunication(XsString portName, XsResultValue result) {
    if (SwigDerivedClassHasMethod("onRestoreCommunication", swigMethodTypes22)) xsensdeviceapiPINVOKE.XsCallback_onRestoreCommunicationSwigExplicitXsCallback(swigCPtr, XsString.getCPtr(portName), (int)result); else xsensdeviceapiPINVOKE.XsCallback_onRestoreCommunication(swigCPtr, XsString.getCPtr(portName), (int)result);
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onDeviceStateChanged", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateXsCallback_0(SwigDirectorMethodonDeviceStateChanged);
    if (SwigDerivedClassHasMethod("onLiveDataAvailable", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateXsCallback_1(SwigDirectorMethodonLiveDataAvailable);
    if (SwigDerivedClassHasMethod("onMissedPackets", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateXsCallback_2(SwigDirectorMethodonMissedPackets);
    if (SwigDerivedClassHasMethod("onWakeupReceived", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateXsCallback_3(SwigDirectorMethodonWakeupReceived);
    if (SwigDerivedClassHasMethod("onProgressUpdated", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateXsCallback_4(SwigDirectorMethodonProgressUpdated);
    if (SwigDerivedClassHasMethod("onWriteMessageToLogFile", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateXsCallback_5(SwigDirectorMethodonWriteMessageToLogFile);
    if (SwigDerivedClassHasMethod("onBufferedDataAvailable", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateXsCallback_6(SwigDirectorMethodonBufferedDataAvailable);
    if (SwigDerivedClassHasMethod("onConnectivityChanged", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateXsCallback_7(SwigDirectorMethodonConnectivityChanged);
    if (SwigDerivedClassHasMethod("onInfoResponse", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateXsCallback_8(SwigDirectorMethodonInfoResponse);
    if (SwigDerivedClassHasMethod("onError", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateXsCallback_9(SwigDirectorMethodonError);
    if (SwigDerivedClassHasMethod("onNonDataMessage", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateXsCallback_10(SwigDirectorMethodonNonDataMessage);
    if (SwigDerivedClassHasMethod("onMessageDetected", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateXsCallback_11(SwigDirectorMethodonMessageDetected);
    if (SwigDerivedClassHasMethod("onMessageReceivedFromDevice", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateXsCallback_12(SwigDirectorMethodonMessageReceivedFromDevice);
    if (SwigDerivedClassHasMethod("onMessageSentToDevice", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateXsCallback_13(SwigDirectorMethodonMessageSentToDevice);
    if (SwigDerivedClassHasMethod("onAllLiveDataAvailable", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateXsCallback_14(SwigDirectorMethodonAllLiveDataAvailable);
    if (SwigDerivedClassHasMethod("onAllBufferedDataAvailable", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateXsCallback_15(SwigDirectorMethodonAllBufferedDataAvailable);
    if (SwigDerivedClassHasMethod("onDataUnavailable", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateXsCallback_16(SwigDirectorMethodonDataUnavailable);
    if (SwigDerivedClassHasMethod("onDataAvailable", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateXsCallback_17(SwigDirectorMethodonDataAvailable);
    if (SwigDerivedClassHasMethod("onAllDataAvailable", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateXsCallback_18(SwigDirectorMethodonAllDataAvailable);
    if (SwigDerivedClassHasMethod("onRecordedDataAvailable", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateXsCallback_19(SwigDirectorMethodonRecordedDataAvailable);
    if (SwigDerivedClassHasMethod("onAllRecordedDataAvailable", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateXsCallback_20(SwigDirectorMethodonAllRecordedDataAvailable);
    if (SwigDerivedClassHasMethod("onTransmissionRequest", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateXsCallback_21(SwigDirectorMethodonTransmissionRequest);
    if (SwigDerivedClassHasMethod("onRestoreCommunication", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateXsCallback_22(SwigDirectorMethodonRestoreCommunication);
    xsensdeviceapiPINVOKE.XsCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(XsCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodonDeviceStateChanged(global::System.IntPtr dev, int newState, int oldState) {
    onDeviceStateChanged((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (XsDeviceState)newState, (XsDeviceState)oldState);
  }

  private void SwigDirectorMethodonLiveDataAvailable(global::System.IntPtr dev, global::System.IntPtr packet) {
    onLiveDataAvailable((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (packet == global::System.IntPtr.Zero) ? null : new XsDataPacket(packet, false));
  }

  private void SwigDirectorMethodonMissedPackets(global::System.IntPtr dev, int count, int first, int last) {
    onMissedPackets((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), count, first, last);
  }

  private void SwigDirectorMethodonWakeupReceived(global::System.IntPtr dev) {
    onWakeupReceived((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false));
  }

  private void SwigDirectorMethodonProgressUpdated(global::System.IntPtr dev, int current, int total, global::System.IntPtr identifier) {
    onProgressUpdated((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), current, total, (identifier == global::System.IntPtr.Zero) ? null : new XsString(identifier, false));
  }

  private int SwigDirectorMethodonWriteMessageToLogFile(global::System.IntPtr dev, global::System.IntPtr message) {
    return onWriteMessageToLogFile((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (message == global::System.IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  private void SwigDirectorMethodonBufferedDataAvailable(global::System.IntPtr dev, global::System.IntPtr packet) {
    onBufferedDataAvailable((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (packet == global::System.IntPtr.Zero) ? null : new XsDataPacket(packet, false));
  }

  private void SwigDirectorMethodonConnectivityChanged(global::System.IntPtr dev, int newState) {
    onConnectivityChanged((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (XsConnectivityState)newState);
  }

  private void SwigDirectorMethodonInfoResponse(global::System.IntPtr dev, int request) {
    onInfoResponse((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (XsInfoRequest)request);
  }

  private void SwigDirectorMethodonError(global::System.IntPtr dev, int error) {
    onError((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (XsResultValue)error);
  }

  private void SwigDirectorMethodonNonDataMessage(global::System.IntPtr dev, global::System.IntPtr message) {
    onNonDataMessage((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (message == global::System.IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  private void SwigDirectorMethodonMessageDetected(global::System.IntPtr dev, int type, global::System.IntPtr rawMessage) {
    onMessageDetected((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (XsProtocolType)type, (rawMessage == global::System.IntPtr.Zero) ? null : new XsByteArray(rawMessage, false));
  }

  private void SwigDirectorMethodonMessageReceivedFromDevice(global::System.IntPtr dev, global::System.IntPtr message) {
    onMessageReceivedFromDevice((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (message == global::System.IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  private void SwigDirectorMethodonMessageSentToDevice(global::System.IntPtr dev, global::System.IntPtr message) {
    onMessageSentToDevice((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (message == global::System.IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  private void SwigDirectorMethodonAllLiveDataAvailable(global::System.IntPtr devs, global::System.IntPtr packets) {
    onAllLiveDataAvailable((devs == global::System.IntPtr.Zero) ? null : new XsDevicePtrArray(devs, false), (packets == global::System.IntPtr.Zero) ? null : new XsDataPacketPtrArray(packets, false));
  }

  private void SwigDirectorMethodonAllBufferedDataAvailable(global::System.IntPtr devs, global::System.IntPtr packets) {
    onAllBufferedDataAvailable((devs == global::System.IntPtr.Zero) ? null : new XsDevicePtrArray(devs, false), (packets == global::System.IntPtr.Zero) ? null : new XsDataPacketPtrArray(packets, false));
  }

  private void SwigDirectorMethodonDataUnavailable(global::System.IntPtr dev, long packetId) {
    onDataUnavailable((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), packetId);
  }

  private void SwigDirectorMethodonDataAvailable(global::System.IntPtr dev, global::System.IntPtr packet) {
    onDataAvailable((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (packet == global::System.IntPtr.Zero) ? null : new XsDataPacket(packet, false));
  }

  private void SwigDirectorMethodonAllDataAvailable(global::System.IntPtr devs, global::System.IntPtr packets) {
    onAllDataAvailable((devs == global::System.IntPtr.Zero) ? null : new XsDevicePtrArray(devs, false), (packets == global::System.IntPtr.Zero) ? null : new XsDataPacketPtrArray(packets, false));
  }

  private void SwigDirectorMethodonRecordedDataAvailable(global::System.IntPtr dev, global::System.IntPtr packet) {
    onRecordedDataAvailable((dev == global::System.IntPtr.Zero) ? null : new XsDevice(dev, false), (packet == global::System.IntPtr.Zero) ? null : new XsDataPacket(packet, false));
  }

  private void SwigDirectorMethodonAllRecordedDataAvailable(global::System.IntPtr devs, global::System.IntPtr packets) {
    onAllRecordedDataAvailable((devs == global::System.IntPtr.Zero) ? null : new XsDevicePtrArray(devs, false), (packets == global::System.IntPtr.Zero) ? null : new XsDataPacketPtrArray(packets, false));
  }

  private void SwigDirectorMethodonTransmissionRequest(int channelId, global::System.IntPtr data) {
    onTransmissionRequest(channelId, (data == global::System.IntPtr.Zero) ? null : new XsByteArray(data, false));
  }

  private void SwigDirectorMethodonRestoreCommunication(global::System.IntPtr portName, int result) {
    onRestoreCommunication((portName == global::System.IntPtr.Zero) ? null : new XsString(portName, false), (XsResultValue)result);
  }

  public delegate void SwigDelegateXsCallback_0(global::System.IntPtr dev, int newState, int oldState);
  public delegate void SwigDelegateXsCallback_1(global::System.IntPtr dev, global::System.IntPtr packet);
  public delegate void SwigDelegateXsCallback_2(global::System.IntPtr dev, int count, int first, int last);
  public delegate void SwigDelegateXsCallback_3(global::System.IntPtr dev);
  public delegate void SwigDelegateXsCallback_4(global::System.IntPtr dev, int current, int total, global::System.IntPtr identifier);
  public delegate int SwigDelegateXsCallback_5(global::System.IntPtr dev, global::System.IntPtr message);
  public delegate void SwigDelegateXsCallback_6(global::System.IntPtr dev, global::System.IntPtr packet);
  public delegate void SwigDelegateXsCallback_7(global::System.IntPtr dev, int newState);
  public delegate void SwigDelegateXsCallback_8(global::System.IntPtr dev, int request);
  public delegate void SwigDelegateXsCallback_9(global::System.IntPtr dev, int error);
  public delegate void SwigDelegateXsCallback_10(global::System.IntPtr dev, global::System.IntPtr message);
  public delegate void SwigDelegateXsCallback_11(global::System.IntPtr dev, int type, global::System.IntPtr rawMessage);
  public delegate void SwigDelegateXsCallback_12(global::System.IntPtr dev, global::System.IntPtr message);
  public delegate void SwigDelegateXsCallback_13(global::System.IntPtr dev, global::System.IntPtr message);
  public delegate void SwigDelegateXsCallback_14(global::System.IntPtr devs, global::System.IntPtr packets);
  public delegate void SwigDelegateXsCallback_15(global::System.IntPtr devs, global::System.IntPtr packets);
  public delegate void SwigDelegateXsCallback_16(global::System.IntPtr dev, long packetId);
  public delegate void SwigDelegateXsCallback_17(global::System.IntPtr dev, global::System.IntPtr packet);
  public delegate void SwigDelegateXsCallback_18(global::System.IntPtr devs, global::System.IntPtr packets);
  public delegate void SwigDelegateXsCallback_19(global::System.IntPtr dev, global::System.IntPtr packet);
  public delegate void SwigDelegateXsCallback_20(global::System.IntPtr devs, global::System.IntPtr packets);
  public delegate void SwigDelegateXsCallback_21(int channelId, global::System.IntPtr data);
  public delegate void SwigDelegateXsCallback_22(global::System.IntPtr portName, int result);

  private SwigDelegateXsCallback_0 swigDelegate0;
  private SwigDelegateXsCallback_1 swigDelegate1;
  private SwigDelegateXsCallback_2 swigDelegate2;
  private SwigDelegateXsCallback_3 swigDelegate3;
  private SwigDelegateXsCallback_4 swigDelegate4;
  private SwigDelegateXsCallback_5 swigDelegate5;
  private SwigDelegateXsCallback_6 swigDelegate6;
  private SwigDelegateXsCallback_7 swigDelegate7;
  private SwigDelegateXsCallback_8 swigDelegate8;
  private SwigDelegateXsCallback_9 swigDelegate9;
  private SwigDelegateXsCallback_10 swigDelegate10;
  private SwigDelegateXsCallback_11 swigDelegate11;
  private SwigDelegateXsCallback_12 swigDelegate12;
  private SwigDelegateXsCallback_13 swigDelegate13;
  private SwigDelegateXsCallback_14 swigDelegate14;
  private SwigDelegateXsCallback_15 swigDelegate15;
  private SwigDelegateXsCallback_16 swigDelegate16;
  private SwigDelegateXsCallback_17 swigDelegate17;
  private SwigDelegateXsCallback_18 swigDelegate18;
  private SwigDelegateXsCallback_19 swigDelegate19;
  private SwigDelegateXsCallback_20 swigDelegate20;
  private SwigDelegateXsCallback_21 swigDelegate21;
  private SwigDelegateXsCallback_22 swigDelegate22;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(XsDevice), typeof(XsDeviceState), typeof(XsDeviceState) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(XsDevice), typeof(XsDataPacket) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(XsDevice), typeof(int), typeof(int), typeof(int) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(XsDevice) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(XsDevice), typeof(int), typeof(int), typeof(XsString) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(XsDevice), typeof(XsMessage) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(XsDevice), typeof(XsDataPacket) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(XsDevice), typeof(XsConnectivityState) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(XsDevice), typeof(XsInfoRequest) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(XsDevice), typeof(XsResultValue) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(XsDevice), typeof(XsMessage) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(XsDevice), typeof(XsProtocolType), typeof(XsByteArray) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(XsDevice), typeof(XsMessage) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(XsDevice), typeof(XsMessage) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] { typeof(XsDevicePtrArray), typeof(XsDataPacketPtrArray) };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(XsDevicePtrArray), typeof(XsDataPacketPtrArray) };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(XsDevice), typeof(long) };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(XsDevice), typeof(XsDataPacket) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(XsDevicePtrArray), typeof(XsDataPacketPtrArray) };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] { typeof(XsDevice), typeof(XsDataPacket) };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(XsDevicePtrArray), typeof(XsDataPacketPtrArray) };
  private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(int), typeof(XsByteArray) };
  private static global::System.Type[] swigMethodTypes22 = new global::System.Type[] { typeof(XsString), typeof(XsResultValue) };
}

}
