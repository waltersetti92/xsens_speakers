
//  ==> COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE <==
//  WARNING: COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO AN END USER LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  
//  THIS SOFTWARE CAN CONTAIN OPEN SOURCE COMPONENTS WHICH CAN BE SUBJECT TO 
//  THE FOLLOWING GENERAL PUBLIC LICENSES:
//  ==> Qt GNU LGPL version 3: http://doc.qt.io/qt-5/lgpl.html <==
//  ==> LAPACK BSD License:  http://www.netlib.org/lapack/LICENSE.txt <==
//  ==> StackWalker 3-Clause BSD License: https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE <==
//  ==> Icon Creative Commons 3.0: https://creativecommons.org/licenses/by/3.0/legalcode <==
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsDeviceRef : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsDeviceRef(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsDeviceRef obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsDeviceRef() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsDeviceRef(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public XsDeviceRef() : this(xsensdeviceapiPINVOKE.new_XsDeviceRef__SWIG_0(), true) {
  }

  public XsDeviceRef(XsDevice device) : this(xsensdeviceapiPINVOKE.new_XsDeviceRef__SWIG_1(XsDevice.getCPtr(device)), true) {
  }

  public XsDeviceRef(XsDeviceRef deviceRef) : this(xsensdeviceapiPINVOKE.new_XsDeviceRef__SWIG_2(XsDeviceRef.getCPtr(deviceRef)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsDevice __deref__() {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDeviceRef___deref__(swigCPtr);
    XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDevice(cPtr, false);
    return ret;
  }

  public void addRef() {
    xsensdeviceapiPINVOKE.XsDeviceRef_addRef(swigCPtr);
  }

  public void removeRef() {
    xsensdeviceapiPINVOKE.XsDeviceRef_removeRef(swigCPtr);
  }

  public uint refCounter() {
    uint ret = xsensdeviceapiPINVOKE.XsDeviceRef_refCounter(swigCPtr);
    return ret;
  }

  public XsDevice master() {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDeviceRef_master(swigCPtr);
    XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDevice(cPtr, false);
    return ret;
  }

  public XsDevice findDevice(XsDeviceId deviceid) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDeviceRef_findDevice(swigCPtr, XsDeviceId.getCPtr(deviceid));
    XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDevice(cPtr, false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsDevice findDeviceConst(XsDeviceId deviceid) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDeviceRef_findDeviceConst(swigCPtr, XsDeviceId.getCPtr(deviceid));
    XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDevice(cPtr, false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsDevice subDevice(int subDeviceId) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDeviceRef_subDevice(swigCPtr, subDeviceId);
    XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDevice(cPtr, false);
    return ret;
  }

  public int subDeviceCount() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_subDeviceCount(swigCPtr);
    return ret;
  }

  public int busId() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_busId(swigCPtr);
    return ret;
  }

  public XsDeviceId deviceId() {
    XsDeviceId ret = new XsDeviceId(xsensdeviceapiPINVOKE.XsDeviceRef_deviceId(swigCPtr), false);
    return ret;
  }

  public XsVersion firmwareVersion() {
    XsVersion ret = new XsVersion(xsensdeviceapiPINVOKE.XsDeviceRef_firmwareVersion(swigCPtr), true);
    return ret;
  }

  public bool isMasterDevice() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isMasterDevice(swigCPtr);
    return ret;
  }

  public bool isContainerDevice() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isContainerDevice(swigCPtr);
    return ret;
  }

  public bool isInitialized() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isInitialized(swigCPtr);
    return ret;
  }

  public bool isStandaloneDevice() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isStandaloneDevice(swigCPtr);
    return ret;
  }

  public XsDevice deviceAtBusIdConst(int busid) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDeviceRef_deviceAtBusIdConst(swigCPtr, busid);
    XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDevice(cPtr, false);
    return ret;
  }

  public XsDevice deviceAtBusId(int busid) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDeviceRef_deviceAtBusId(swigCPtr, busid);
    XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDevice(cPtr, false);
    return ret;
  }

  public XsResultValue updatePortInfo(XsPortInfo newInfo) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsDeviceRef_updatePortInfo(swigCPtr, XsPortInfo.getCPtr(newInfo));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGotoConfigOnClose(bool gotoConfigOnClose) {
    xsensdeviceapiPINVOKE.XsDeviceRef_setGotoConfigOnClose(swigCPtr, gotoConfigOnClose);
  }

  public XsResultValue createLogFile(XsString filename) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsDeviceRef_createLogFile(swigCPtr, XsString.getCPtr(filename));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool closeLogFile() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_closeLogFile(swigCPtr);
    return ret;
  }

  public bool isMeasuring() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isMeasuring(swigCPtr);
    return ret;
  }

  public bool isRecording() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isRecording(swigCPtr);
    return ret;
  }

  public bool isReadingFromFile() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isReadingFromFile(swigCPtr);
    return ret;
  }

  public void restartFilter() {
    xsensdeviceapiPINVOKE.XsDeviceRef_restartFilter(swigCPtr);
  }

  public XsResultValue lastResult() {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsDeviceRef_lastResult(swigCPtr);
    return ret;
  }

  public XsString lastResultText() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsDeviceRef_lastResultText(swigCPtr), true);
    return ret;
  }

  public int recordingQueueLength() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_recordingQueueLength(swigCPtr);
    return ret;
  }

  public int cacheSize() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_cacheSize(swigCPtr);
    return ret;
  }

  public XsDeviceState deviceState() {
    XsDeviceState ret = (XsDeviceState)xsensdeviceapiPINVOKE.XsDeviceRef_deviceState(swigCPtr);
    return ret;
  }

  public bool supportsSyncSettings(XsDeviceId deviceId) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_supportsSyncSettings(swigCPtr, XsDeviceId.getCPtr(deviceId));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isCompatibleSyncSetting(XsDeviceId deviceId, XsSyncSetting setting1, XsSyncSetting setting2) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isCompatibleSyncSetting(swigCPtr, XsDeviceId.getCPtr(deviceId), XsSyncSetting.getCPtr(setting1), XsSyncSetting.getCPtr(setting2));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint syncSettingsTimeResolutionInMicroSeconds(XsDeviceId deviceId) {
    uint ret = xsensdeviceapiPINVOKE.XsDeviceRef_syncSettingsTimeResolutionInMicroSeconds(swigCPtr, XsDeviceId.getCPtr(deviceId));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearCallbackHandlers(bool chain) {
    xsensdeviceapiPINVOKE.XsDeviceRef_clearCallbackHandlers__SWIG_0(swigCPtr, chain);
  }

  public void clearCallbackHandlers() {
    xsensdeviceapiPINVOKE.XsDeviceRef_clearCallbackHandlers__SWIG_1(swigCPtr);
  }

  public void addCallbackHandler(XsCallbackPlainC cb, bool chain) {
    xsensdeviceapiPINVOKE.XsDeviceRef_addCallbackHandler__SWIG_0(swigCPtr, XsCallbackPlainC.getCPtr(cb), chain);
  }

  public void addCallbackHandler(XsCallbackPlainC cb) {
    xsensdeviceapiPINVOKE.XsDeviceRef_addCallbackHandler__SWIG_1(swigCPtr, XsCallbackPlainC.getCPtr(cb));
  }

  public void removeCallbackHandler(XsCallbackPlainC cb, bool chain) {
    xsensdeviceapiPINVOKE.XsDeviceRef_removeCallbackHandler__SWIG_0(swigCPtr, XsCallbackPlainC.getCPtr(cb), chain);
  }

  public void removeCallbackHandler(XsCallbackPlainC cb) {
    xsensdeviceapiPINVOKE.XsDeviceRef_removeCallbackHandler__SWIG_1(swigCPtr, XsCallbackPlainC.getCPtr(cb));
  }

  public XsDeviceConfiguration deviceConfiguration() {
    XsDeviceConfiguration ret = new XsDeviceConfiguration(xsensdeviceapiPINVOKE.XsDeviceRef_deviceConfiguration(swigCPtr), true);
    return ret;
  }

  public int batteryLevel() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_batteryLevel(swigCPtr);
    return ret;
  }

  public int updateRateForDataIdentifier(XsDataIdentifier dataType) {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_updateRateForDataIdentifier(swigCPtr, (int)dataType);
    return ret;
  }

  public int updateRateForProcessedDataIdentifier(XsDataIdentifier dataType) {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_updateRateForProcessedDataIdentifier(swigCPtr, (int)dataType);
    return ret;
  }

  public XsIntArray supportedUpdateRates(XsDataIdentifier dataType) {
    XsIntArray ret = new XsIntArray(xsensdeviceapiPINVOKE.XsDeviceRef_supportedUpdateRates__SWIG_0(swigCPtr, (int)dataType), true);
    return ret;
  }

  public XsIntArray supportedUpdateRates() {
    XsIntArray ret = new XsIntArray(xsensdeviceapiPINVOKE.XsDeviceRef_supportedUpdateRates__SWIG_1(swigCPtr), true);
    return ret;
  }

  public int maximumUpdateRate() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_maximumUpdateRate(swigCPtr);
    return ret;
  }

  public bool hasDataEnabled(XsDataIdentifier dataType) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_hasDataEnabled(swigCPtr, (int)dataType);
    return ret;
  }

  public bool hasProcessedDataEnabled(XsDataIdentifier dataType) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_hasProcessedDataEnabled(swigCPtr, (int)dataType);
    return ret;
  }

  public XsString productCode() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsDeviceRef_productCode(swigCPtr), true);
    return ret;
  }

  public XsString shortProductCode() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsDeviceRef_shortProductCode(swigCPtr), true);
    return ret;
  }

  public XsString portName() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsDeviceRef_portName(swigCPtr), true);
    return ret;
  }

  public XsPortInfo portInfo() {
    XsPortInfo ret = new XsPortInfo(xsensdeviceapiPINVOKE.XsDeviceRef_portInfo(swigCPtr), true);
    return ret;
  }

  public XsBaudRate baudRate() {
    XsBaudRate ret = (XsBaudRate)xsensdeviceapiPINVOKE.XsDeviceRef_baudRate(swigCPtr);
    return ret;
  }

  public XsBaudRate serialBaudRate() {
    XsBaudRate ret = (XsBaudRate)xsensdeviceapiPINVOKE.XsDeviceRef_serialBaudRate(swigCPtr);
    return ret;
  }

  public XsVersion hardwareVersion() {
    XsVersion ret = new XsVersion(xsensdeviceapiPINVOKE.XsDeviceRef_hardwareVersion(swigCPtr), true);
    return ret;
  }

  public int portNumber() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_portNumber(swigCPtr);
    return ret;
  }

  public bool startRecording() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_startRecording(swigCPtr);
    return ret;
  }

  public bool triggerStartRecording() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_triggerStartRecording(swigCPtr);
    return ret;
  }

  public bool stopRecording() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_stopRecording(swigCPtr);
    return ret;
  }

  public long getStartRecordingPacketId() {
    long ret = xsensdeviceapiPINVOKE.XsDeviceRef_getStartRecordingPacketId(swigCPtr);
    return ret;
  }

  public long getStopRecordingPacketId() {
    long ret = xsensdeviceapiPINVOKE.XsDeviceRef_getStopRecordingPacketId(swigCPtr);
    return ret;
  }

  public void setOptions(XsOption enable, XsOption disable) {
    xsensdeviceapiPINVOKE.XsDeviceRef_setOptions(swigCPtr, (int)enable, (int)disable);
  }

  public bool areOptionsEnabled(XsOption options) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_areOptionsEnabled(swigCPtr, (int)options);
    return ret;
  }

  public XsOption getOptions() {
    XsOption ret = (XsOption)xsensdeviceapiPINVOKE.XsDeviceRef_getOptions(swigCPtr);
    return ret;
  }

  public bool sendCustomMessage(XsMessage messageSend, bool waitForResult, XsMessage messageReceive, int timeout) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_sendCustomMessage__SWIG_0(swigCPtr, XsMessage.getCPtr(messageSend), waitForResult, XsMessage.getCPtr(messageReceive), timeout);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool sendCustomMessage(XsMessage messageSend, bool waitForResult, XsMessage messageReceive) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_sendCustomMessage__SWIG_1(swigCPtr, XsMessage.getCPtr(messageSend), waitForResult, XsMessage.getCPtr(messageReceive));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool sendRawMessage(XsMessage message) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_sendRawMessage(swigCPtr, XsMessage.getCPtr(message));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setSerialBaudRate(XsBaudRate baudrate) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setSerialBaudRate(swigCPtr, (int)baudrate);
    return ret;
  }

  public XsIntArray portConfiguration() {
    XsIntArray ret = new XsIntArray(xsensdeviceapiPINVOKE.XsDeviceRef_portConfiguration(swigCPtr), true);
    return ret;
  }

  public bool setPortConfiguration(XsIntArray config) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setPortConfiguration(swigCPtr, XsIntArray.getCPtr(config));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isMotionTracker() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isMotionTracker(swigCPtr);
    return ret;
  }

  public XsOperationalMode operationalMode() {
    XsOperationalMode ret = (XsOperationalMode)xsensdeviceapiPINVOKE.XsDeviceRef_operationalMode(swigCPtr);
    return ret;
  }

  public bool setOperationalMode(XsOperationalMode mode) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setOperationalMode(swigCPtr, (int)mode);
    return ret;
  }

  public int updateRate() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_updateRate(swigCPtr);
    return ret;
  }

  public bool setUpdateRate(int rate) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setUpdateRate(swigCPtr, rate);
    return ret;
  }

  public XsDeviceOptionFlag deviceOptionFlags() {
    XsDeviceOptionFlag ret = (XsDeviceOptionFlag)xsensdeviceapiPINVOKE.XsDeviceRef_deviceOptionFlags(swigCPtr);
    return ret;
  }

  public bool setDeviceOptionFlags(XsDeviceOptionFlag setFlags, XsDeviceOptionFlag clearFlags) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setDeviceOptionFlags(swigCPtr, (int)setFlags, (int)clearFlags);
    return ret;
  }

  public XsOutputConfigurationArray outputConfiguration() {
    XsOutputConfigurationArray ret = new XsOutputConfigurationArray(xsensdeviceapiPINVOKE.XsDeviceRef_outputConfiguration(swigCPtr), true);
    return ret;
  }

  public XsOutputConfigurationArray processedOutputConfiguration() {
    XsOutputConfigurationArray ret = new XsOutputConfigurationArray(xsensdeviceapiPINVOKE.XsDeviceRef_processedOutputConfiguration(swigCPtr), true);
    return ret;
  }

  public bool setOutputConfiguration(XsOutputConfigurationArray config) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setOutputConfiguration(swigCPtr, XsOutputConfigurationArray.getCPtr(config));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isInStringOutputMode() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isInStringOutputMode(swigCPtr);
    return ret;
  }

  public XsCanOutputConfigurationArray canOutputConfiguration() {
    XsCanOutputConfigurationArray ret = new XsCanOutputConfigurationArray(xsensdeviceapiPINVOKE.XsDeviceRef_canOutputConfiguration(swigCPtr), true);
    return ret;
  }

  public bool setCanOutputConfiguration(XsCanOutputConfigurationArray config) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setCanOutputConfiguration(swigCPtr, XsCanOutputConfigurationArray.getCPtr(config));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint canConfiguration() {
    uint ret = xsensdeviceapiPINVOKE.XsDeviceRef_canConfiguration(swigCPtr);
    return ret;
  }

  public bool setCanConfiguration(uint config) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setCanConfiguration(swigCPtr, config);
    return ret;
  }

  public bool usesLegacyDeviceMode() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_usesLegacyDeviceMode(swigCPtr);
    return ret;
  }

  public ushort stringOutputType() {
    ushort ret = xsensdeviceapiPINVOKE.XsDeviceRef_stringOutputType(swigCPtr);
    return ret;
  }

  public ushort stringSamplePeriod() {
    ushort ret = xsensdeviceapiPINVOKE.XsDeviceRef_stringSamplePeriod(swigCPtr);
    return ret;
  }

  public ushort stringSkipFactor() {
    ushort ret = xsensdeviceapiPINVOKE.XsDeviceRef_stringSkipFactor(swigCPtr);
    return ret;
  }

  public bool setStringOutputMode(ushort type, ushort period, ushort skipFactor) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setStringOutputMode(swigCPtr, type, period, skipFactor);
    return ret;
  }

  public XsStringOutputTypeArray supportedStringOutputTypes() {
    XsStringOutputTypeArray ret = new XsStringOutputTypeArray(xsensdeviceapiPINVOKE.XsDeviceRef_supportedStringOutputTypes(swigCPtr), true);
    return ret;
  }

  public int dataLength() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_dataLength(swigCPtr);
    return ret;
  }

  public XsSyncSettingArray syncSettings() {
    XsSyncSettingArray ret = new XsSyncSettingArray(xsensdeviceapiPINVOKE.XsDeviceRef_syncSettings(swigCPtr), true);
    return ret;
  }

  public bool setSyncSettings(XsSyncSettingArray settingList) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setSyncSettings(swigCPtr, XsSyncSettingArray.getCPtr(settingList));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isSyncMaster() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isSyncMaster(swigCPtr);
    return ret;
  }

  public bool isSyncSlave() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isSyncSlave(swigCPtr);
    return ret;
  }

  public XsSyncSettingArray supportedSyncSettings() {
    XsSyncSettingArray ret = new XsSyncSettingArray(xsensdeviceapiPINVOKE.XsDeviceRef_supportedSyncSettings__SWIG_0(swigCPtr), true);
    return ret;
  }

  public XsSyncSettingArray supportedSyncSettings(XsDeviceId deviceId) {
    XsSyncSettingArray ret = new XsSyncSettingArray(xsensdeviceapiPINVOKE.XsDeviceRef_supportedSyncSettings__SWIG_1(swigCPtr, XsDeviceId.getCPtr(deviceId)), true);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool gotoMeasurement() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_gotoMeasurement(swigCPtr);
    return ret;
  }

  public bool gotoConfig() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_gotoConfig(swigCPtr);
    return ret;
  }

  public bool restoreFactoryDefaults() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_restoreFactoryDefaults(swigCPtr);
    return ret;
  }

  public bool reset() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_reset(swigCPtr);
    return ret;
  }

  public bool reopenPort(bool gotoConfig, bool skipDeviceIdCheck) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_reopenPort__SWIG_0(swigCPtr, gotoConfig, skipDeviceIdCheck);
    return ret;
  }

  public bool reopenPort(bool gotoConfig) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_reopenPort__SWIG_1(swigCPtr, gotoConfig);
    return ret;
  }

  public void writeDeviceSettingsToFile() {
    xsensdeviceapiPINVOKE.XsDeviceRef_writeDeviceSettingsToFile(swigCPtr);
  }

  public void flushInputBuffers() {
    xsensdeviceapiPINVOKE.XsDeviceRef_flushInputBuffers(swigCPtr);
  }

  public XsSyncRole syncRole() {
    XsSyncRole ret = (XsSyncRole)xsensdeviceapiPINVOKE.XsDeviceRef_syncRole(swigCPtr);
    return ret;
  }

  public bool loadLogFile() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_loadLogFile(swigCPtr);
    return ret;
  }

  public bool abortLoadLogFile() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_abortLoadLogFile(swigCPtr);
    return ret;
  }

  public XsString logFileName() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsDeviceRef_logFileName(swigCPtr), true);
    return ret;
  }

  public bool resetOrientation(XsResetMethod resetmethod) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_resetOrientation(swigCPtr, (int)resetmethod);
    return ret;
  }

  public bool resetLogFileReadPosition() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_resetLogFileReadPosition(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p___int64 logFileSize() {
    SWIGTYPE_p___int64 ret = new SWIGTYPE_p___int64(xsensdeviceapiPINVOKE.XsDeviceRef_logFileSize(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p___int64 logFileReadPosition() {
    SWIGTYPE_p___int64 ret = new SWIGTYPE_p___int64(xsensdeviceapiPINVOKE.XsDeviceRef_logFileReadPosition(swigCPtr), true);
    return ret;
  }

  public bool updateCachedDeviceInformation() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_updateCachedDeviceInformation(swigCPtr);
    return ret;
  }

  public bool enableProtocol(XsProtocolType protocol) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_enableProtocol(swigCPtr, (int)protocol);
    return ret;
  }

  public bool disableProtocol(XsProtocolType protocol) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_disableProtocol(swigCPtr, (int)protocol);
    return ret;
  }

  public bool isProtocolEnabled(XsProtocolType protocol) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isProtocolEnabled(swigCPtr, (int)protocol);
    return ret;
  }

  public uint deviceBufferSize() {
    uint ret = xsensdeviceapiPINVOKE.XsDeviceRef_deviceBufferSize(swigCPtr);
    return ret;
  }

  public bool setDeviceBufferSize(uint frames) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setDeviceBufferSize(swigCPtr, frames);
    return ret;
  }

  public XsConnectivityState connectivityState() {
    XsConnectivityState ret = (XsConnectivityState)xsensdeviceapiPINVOKE.XsDeviceRef_connectivityState(swigCPtr);
    return ret;
  }

  public void waitForAllDevicesInitialized() {
    xsensdeviceapiPINVOKE.XsDeviceRef_waitForAllDevicesInitialized(swigCPtr);
  }

  public XsDevicePtrArray children() {
    XsDevicePtrArray ret = new XsDevicePtrArray(xsensdeviceapiPINVOKE.XsDeviceRef_children(swigCPtr), true);
    return ret;
  }

  public int childCount() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_childCount(swigCPtr);
    return ret;
  }

  public bool enableRadio(int channel) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_enableRadio(swigCPtr, channel);
    return ret;
  }

  public bool disableRadio() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_disableRadio(swigCPtr);
    return ret;
  }

  public int radioChannel() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_radioChannel(swigCPtr);
    return ret;
  }

  public bool isRadioEnabled() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isRadioEnabled(swigCPtr);
    return ret;
  }

  public bool makeOperational() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_makeOperational(swigCPtr);
    return ret;
  }

  public bool isOperational() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isOperational(swigCPtr);
    return ret;
  }

  public bool isInSyncStationMode() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isInSyncStationMode(swigCPtr);
    return ret;
  }

  public bool setSyncStationMode(bool enabled) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setSyncStationMode(swigCPtr, enabled);
    return ret;
  }

  public bool stealthMode() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_stealthMode(swigCPtr);
    return ret;
  }

  public bool setStealthMode(bool enabled) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setStealthMode(swigCPtr, enabled);
    return ret;
  }

  public void discardRetransmissions(long firstNewPacketId) {
    xsensdeviceapiPINVOKE.XsDeviceRef_discardRetransmissions(swigCPtr, firstNewPacketId);
  }

  public bool abortFlushing() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_abortFlushing(swigCPtr);
    return ret;
  }

  public bool setDeviceAccepted(XsDeviceId deviceId) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setDeviceAccepted(swigCPtr, XsDeviceId.getCPtr(deviceId));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setDeviceRejected(XsDeviceId deviceId) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setDeviceRejected(swigCPtr, XsDeviceId.getCPtr(deviceId));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setAccessControlMode(XsAccessControlMode mode, XsDeviceIdArray initialList) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setAccessControlMode(swigCPtr, (int)mode, XsDeviceIdArray.getCPtr(initialList));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsAccessControlMode accessControlMode() {
    XsAccessControlMode ret = (XsAccessControlMode)xsensdeviceapiPINVOKE.XsDeviceRef_accessControlMode(swigCPtr);
    return ret;
  }

  public XsDeviceIdArray currentAccessControlList() {
    XsDeviceIdArray ret = new XsDeviceIdArray(xsensdeviceapiPINVOKE.XsDeviceRef_currentAccessControlList(swigCPtr), true);
    return ret;
  }

  public XsResultValue setDeviceParameter(XsDeviceParameter parameter) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsDeviceRef_setDeviceParameter(swigCPtr, XsDeviceParameter.getCPtr(parameter));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsResultValue deviceParameter(XsDeviceParameter parameter) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsDeviceRef_deviceParameter(swigCPtr, XsDeviceParameter.getCPtr(parameter));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsUbloxGnssPlatform ubloxGnssPlatform() {
    XsUbloxGnssPlatform ret = (XsUbloxGnssPlatform)xsensdeviceapiPINVOKE.XsDeviceRef_ubloxGnssPlatform(swigCPtr);
    return ret;
  }

  public bool setUbloxGnssPlatform(XsUbloxGnssPlatform ubloxGnssPlatform) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setUbloxGnssPlatform(swigCPtr, (int)ubloxGnssPlatform);
    return ret;
  }

  public XsIntArray gnssReceiverSettings() {
    XsIntArray ret = new XsIntArray(xsensdeviceapiPINVOKE.XsDeviceRef_gnssReceiverSettings(swigCPtr), true);
    return ret;
  }

  public bool setGnssReceiverSettings(XsIntArray gnssReceiverSettings) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setGnssReceiverSettings(swigCPtr, XsIntArray.getCPtr(gnssReceiverSettings));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool acceptConnection() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_acceptConnection(swigCPtr);
    return ret;
  }

  public bool rejectConnection() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_rejectConnection(swigCPtr);
    return ret;
  }

  public int wirelessPriority() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_wirelessPriority(swigCPtr);
    return ret;
  }

  public bool setWirelessPriority(int priority) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setWirelessPriority(swigCPtr, priority);
    return ret;
  }

  public XsRejectReason rejectReason() {
    XsRejectReason ret = (XsRejectReason)xsensdeviceapiPINVOKE.XsDeviceRef_rejectReason(swigCPtr);
    return ret;
  }

  public bool requestBatteryLevel() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_requestBatteryLevel(swigCPtr);
    return ret;
  }

  public XsTimeStamp batteryLevelTime() {
    XsTimeStamp ret = new XsTimeStamp(xsensdeviceapiPINVOKE.XsDeviceRef_batteryLevelTime(swigCPtr), true);
    return ret;
  }

  public bool setTransportMode(bool transportModeEnabled) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setTransportMode(swigCPtr, transportModeEnabled);
    return ret;
  }

  public bool transportMode() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_transportMode(swigCPtr);
    return ret;
  }

  public short lastKnownRssi() {
    short ret = xsensdeviceapiPINVOKE.XsDeviceRef_lastKnownRssi(swigCPtr);
    return ret;
  }

  public int packetErrorRate() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_packetErrorRate(swigCPtr);
    return ret;
  }

  public bool isBlueToothEnabled() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isBlueToothEnabled(swigCPtr);
    return ret;
  }

  public bool setBlueToothEnabled(bool enabled) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setBlueToothEnabled(swigCPtr, enabled);
    return ret;
  }

  public bool isBusPowerEnabled() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isBusPowerEnabled(swigCPtr);
    return ret;
  }

  public bool setBusPowerEnabled(bool enabled) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setBusPowerEnabled(swigCPtr, enabled);
    return ret;
  }

  public bool powerDown() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_powerDown(swigCPtr);
    return ret;
  }

  public XsErrorMode errorMode() {
    XsErrorMode ret = (XsErrorMode)xsensdeviceapiPINVOKE.XsDeviceRef_errorMode(swigCPtr);
    return ret;
  }

  public bool setErrorMode(XsErrorMode errormode) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setErrorMode(swigCPtr, (int)errormode);
    return ret;
  }

  public bool setHeadingOffset(double offset) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setHeadingOffset(swigCPtr, offset);
    return ret;
  }

  public double headingOffset() {
    double ret = xsensdeviceapiPINVOKE.XsDeviceRef_headingOffset(swigCPtr);
    return ret;
  }

  public bool setLocationId(int id) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setLocationId(swigCPtr, id);
    return ret;
  }

  public int locationId() {
    int ret = xsensdeviceapiPINVOKE.XsDeviceRef_locationId(swigCPtr);
    return ret;
  }

  public XsDevice getDeviceFromLocationId(ushort locId) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsDeviceRef_getDeviceFromLocationId(swigCPtr, locId);
    XsDevice ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsDevice(cPtr, false);
    return ret;
  }

  public XsMatrix objectAlignment() {
    XsMatrix ret = new XsMatrix(xsensdeviceapiPINVOKE.XsDeviceRef_objectAlignment(swigCPtr), true);
    return ret;
  }

  public bool setObjectAlignment(XsMatrix matrix) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setObjectAlignment(swigCPtr, XsMatrix.getCPtr(matrix));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double gravityMagnitude() {
    double ret = xsensdeviceapiPINVOKE.XsDeviceRef_gravityMagnitude(swigCPtr);
    return ret;
  }

  public bool setGravityMagnitude(double mag) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setGravityMagnitude(swigCPtr, mag);
    return ret;
  }

  public XsVector initialPositionLLA() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDeviceRef_initialPositionLLA(swigCPtr), true);
    return ret;
  }

  public bool setInitialPositionLLA(XsVector lla) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setInitialPositionLLA(swigCPtr, XsVector.getCPtr(lla));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsTimeInfo utcTime() {
    XsTimeInfo ret = new XsTimeInfo(xsensdeviceapiPINVOKE.XsDeviceRef_utcTime(swigCPtr), true);
    return ret;
  }

  public bool setUtcTime(XsTimeInfo time) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setUtcTime(swigCPtr, XsTimeInfo.getCPtr(time));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool reinitialize() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_reinitialize(swigCPtr);
    return ret;
  }

  public XsFilterProfile xdaFilterProfile() {
    XsFilterProfile ret = new XsFilterProfile(xsensdeviceapiPINVOKE.XsDeviceRef_xdaFilterProfile(swigCPtr), true);
    return ret;
  }

  public bool setXdaFilterProfile(int profileType) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setXdaFilterProfile__SWIG_0(swigCPtr, profileType);
    return ret;
  }

  public bool setXdaFilterProfile(XsString profileType) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setXdaFilterProfile__SWIG_1(swigCPtr, XsString.getCPtr(profileType));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsFilterProfile onboardFilterProfile() {
    XsFilterProfile ret = new XsFilterProfile(xsensdeviceapiPINVOKE.XsDeviceRef_onboardFilterProfile(swigCPtr), true);
    return ret;
  }

  public bool setOnboardFilterProfile(int profileType) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setOnboardFilterProfile__SWIG_0(swigCPtr, profileType);
    return ret;
  }

  public bool setOnboardFilterProfile(XsString profileType) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setOnboardFilterProfile__SWIG_1(swigCPtr, XsString.getCPtr(profileType));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool replaceFilterProfile(XsFilterProfile profileCurrent, XsFilterProfile profileNew) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_replaceFilterProfile(swigCPtr, XsFilterProfile.getCPtr(profileCurrent), XsFilterProfile.getCPtr(profileNew));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsFilterProfileArray availableOnboardFilterProfiles() {
    XsFilterProfileArray ret = new XsFilterProfileArray(xsensdeviceapiPINVOKE.XsDeviceRef_availableOnboardFilterProfiles(swigCPtr), true);
    return ret;
  }

  public XsFilterProfileArray availableXdaFilterProfiles() {
    XsFilterProfileArray ret = new XsFilterProfileArray(xsensdeviceapiPINVOKE.XsDeviceRef_availableXdaFilterProfiles(swigCPtr), true);
    return ret;
  }

  public double accelerometerRange() {
    double ret = xsensdeviceapiPINVOKE.XsDeviceRef_accelerometerRange(swigCPtr);
    return ret;
  }

  public double gyroscopeRange() {
    double ret = xsensdeviceapiPINVOKE.XsDeviceRef_gyroscopeRange(swigCPtr);
    return ret;
  }

  public bool setNoRotation(ushort duration) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setNoRotation(swigCPtr, duration);
    return ret;
  }

  public bool startRepresentativeMotion() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_startRepresentativeMotion(swigCPtr);
    return ret;
  }

  public bool representativeMotionState() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_representativeMotionState(swigCPtr);
    return ret;
  }

  public XsIccRepMotionResult stopRepresentativeMotion() {
    XsIccRepMotionResult ret = new XsIccRepMotionResult(xsensdeviceapiPINVOKE.XsDeviceRef_stopRepresentativeMotion(swigCPtr), true);
    return ret;
  }

  public bool storeIccResults() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_storeIccResults(swigCPtr);
    return ret;
  }

  public ushort rs485TransmissionDelay() {
    ushort ret = xsensdeviceapiPINVOKE.XsDeviceRef_rs485TransmissionDelay(swigCPtr);
    return ret;
  }

  public bool setRs485TransmissionDelay(ushort delay) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setRs485TransmissionDelay(swigCPtr, delay);
    return ret;
  }

  public XsSelfTestResult runSelfTest() {
    XsSelfTestResult ret = new XsSelfTestResult(xsensdeviceapiPINVOKE.XsDeviceRef_runSelfTest(swigCPtr), true);
    return ret;
  }

  public bool requestData() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_requestData(swigCPtr);
    return ret;
  }

  public bool storeFilterState() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_storeFilterState(swigCPtr);
    return ret;
  }

  public XsDataPacket getDataPacketByIndex(uint index) {
    XsDataPacket ret = new XsDataPacket(xsensdeviceapiPINVOKE.XsDeviceRef_getDataPacketByIndex(swigCPtr, index), true);
    return ret;
  }

  public uint getDataPacketCount() {
    uint ret = xsensdeviceapiPINVOKE.XsDeviceRef_getDataPacketCount(swigCPtr);
    return ret;
  }

  public XsDataPacket lastAvailableLiveData() {
    XsDataPacket ret = new XsDataPacket(xsensdeviceapiPINVOKE.XsDeviceRef_lastAvailableLiveData(swigCPtr), true);
    return ret;
  }

  public XsDataPacket takeFirstDataPacketInQueue() {
    XsDataPacket ret = new XsDataPacket(xsensdeviceapiPINVOKE.XsDeviceRef_takeFirstDataPacketInQueue(swigCPtr), true);
    return ret;
  }

  public bool isInitialBiasUpdateEnabled() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isInitialBiasUpdateEnabled(swigCPtr);
    return ret;
  }

  public bool setInitialBiasUpdateEnabled(bool enable) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setInitialBiasUpdateEnabled(swigCPtr, enable);
    return ret;
  }

  public bool isFixedGravityEnabled() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isFixedGravityEnabled(swigCPtr);
    return ret;
  }

  public bool setFixedGravityEnabled(bool enable) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setFixedGravityEnabled(swigCPtr, enable);
    return ret;
  }

  public XsResultValue createConfigFile(XsString filename) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsDeviceRef_createConfigFile(swigCPtr, XsString.getCPtr(filename));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsResultValue applyConfigFile(XsString filename) {
    XsResultValue ret = (XsResultValue)xsensdeviceapiPINVOKE.XsDeviceRef_applyConfigFile(swigCPtr, XsString.getCPtr(filename));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setAlignmentRotationMatrix(XsAlignmentFrame frame, XsMatrix matrix) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setAlignmentRotationMatrix(swigCPtr, (int)frame, XsMatrix.getCPtr(matrix));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsMatrix alignmentRotationMatrix(XsAlignmentFrame frame) {
    XsMatrix ret = new XsMatrix(xsensdeviceapiPINVOKE.XsDeviceRef_alignmentRotationMatrix(swigCPtr, (int)frame), true);
    return ret;
  }

  public bool setAlignmentRotationQuaternion(XsAlignmentFrame frame, XsQuaternion quat) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setAlignmentRotationQuaternion(swigCPtr, (int)frame, XsQuaternion.getCPtr(quat));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsQuaternion alignmentRotationQuaternion(XsAlignmentFrame frame) {
    XsQuaternion ret = new XsQuaternion(xsensdeviceapiPINVOKE.XsDeviceRef_alignmentRotationQuaternion(swigCPtr, (int)frame), true);
    return ret;
  }

  public bool deviceIsDocked(XsDevice dev) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_deviceIsDocked(swigCPtr, XsDevice.getCPtr(dev));
    return ret;
  }

  public bool isLoadLogFileInProgress() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_isLoadLogFileInProgress(swigCPtr);
    return ret;
  }

  public void waitForLoadLogFileDone() {
    xsensdeviceapiPINVOKE.XsDeviceRef_waitForLoadLogFileDone(swigCPtr);
  }

  public bool setGnssLeverArm(XsVector arm) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceRef_setGnssLeverArm(swigCPtr, XsVector.getCPtr(arm));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsVector gnssLeverArm() {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsDeviceRef_gnssLeverArm(swigCPtr), true);
    return ret;
  }

  public uint supportedStatusFlags() {
    uint ret = xsensdeviceapiPINVOKE.XsDeviceRef_supportedStatusFlags(swigCPtr);
    return ret;
  }

  public XsByteArray readMetaDataFromLogFile() {
    XsByteArray ret = new XsByteArray(xsensdeviceapiPINVOKE.XsDeviceRef_readMetaDataFromLogFile(swigCPtr), true);
    return ret;
  }

}

}
