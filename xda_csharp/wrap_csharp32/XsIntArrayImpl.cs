
//  ==> COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE <==
//  WARNING: COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO AN END USER LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  
//  THIS SOFTWARE CAN CONTAIN OPEN SOURCE COMPONENTS WHICH CAN BE SUBJECT TO 
//  THE FOLLOWING GENERAL PUBLIC LICENSES:
//  ==> Qt GNU LGPL version 3: http://doc.qt.io/qt-5/lgpl.html <==
//  ==> LAPACK BSD License:  http://www.netlib.org/lapack/LICENSE.txt <==
//  ==> StackWalker 3-Clause BSD License: https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE <==
//  ==> Icon Creative Commons 3.0: https://creativecommons.org/licenses/by/3.0/legalcode <==
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsIntArrayImpl : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsIntArrayImpl(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsIntArrayImpl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsIntArrayImpl() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsIntArrayImpl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public XsIntArrayImpl(uint count, SWIGTYPE_p_int src) : this(xsensdeviceapiPINVOKE.new_XsIntArrayImpl__SWIG_0(count, SWIGTYPE_p_int.getCPtr(src)), true) {
  }

  public XsIntArrayImpl(uint count) : this(xsensdeviceapiPINVOKE.new_XsIntArrayImpl__SWIG_1(count), true) {
  }

  public XsIntArrayImpl() : this(xsensdeviceapiPINVOKE.new_XsIntArrayImpl__SWIG_2(), true) {
  }

  public XsIntArrayImpl(XsIntArrayImpl other) : this(xsensdeviceapiPINVOKE.new_XsIntArrayImpl__SWIG_3(XsIntArrayImpl.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsIntArrayImpl(SWIGTYPE_p_int ref_, uint sz, XsDataFlags flags) : this(xsensdeviceapiPINVOKE.new_XsIntArrayImpl__SWIG_4(SWIGTYPE_p_int.getCPtr(ref_), sz, (int)flags), true) {
  }

  public void clear() {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_clear(swigCPtr);
  }

  public void reserve(uint count) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_reserve(swigCPtr, count);
  }

  public uint reserved() {
    uint ret = xsensdeviceapiPINVOKE.XsIntArrayImpl_reserved(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_XsArrayDescriptor descriptor() {
    SWIGTYPE_p_XsArrayDescriptor ret = new SWIGTYPE_p_XsArrayDescriptor(xsensdeviceapiPINVOKE.XsIntArrayImpl_descriptor(swigCPtr), false);
    return ret;
  }

  public int value(uint index) {
    int ret = xsensdeviceapiPINVOKE.XsIntArrayImpl_value(swigCPtr, index);
    return ret;
  }

  public int first() {
    int ret = xsensdeviceapiPINVOKE.XsIntArrayImpl_first(swigCPtr);
    return ret;
  }

  public int last() {
    int ret = xsensdeviceapiPINVOKE.XsIntArrayImpl_last(swigCPtr);
    return ret;
  }

  public int at(uint index) {
    int ret = xsensdeviceapiPINVOKE.XsIntArrayImpl_at__SWIG_0(swigCPtr, index);
    return ret;
  }

  public void insert(int item, uint index) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_insert__SWIG_0(swigCPtr, item, index);
  }

  public void insert(SWIGTYPE_p_int items, uint index, uint count) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_insert__SWIG_1(swigCPtr, SWIGTYPE_p_int.getCPtr(items), index, count);
  }

  public void push_back(int item) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_push_back(swigCPtr, item);
  }

  public void pop_back(uint count) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_pop_back__SWIG_0(swigCPtr, count);
  }

  public void pop_back() {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_pop_back__SWIG_1(swigCPtr);
  }

  public void push_front(int item) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_push_front(swigCPtr, item);
  }

  public void pop_front(uint count) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_pop_front__SWIG_0(swigCPtr, count);
  }

  public void pop_front() {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_pop_front__SWIG_1(swigCPtr);
  }

  public uint size() {
    uint ret = xsensdeviceapiPINVOKE.XsIntArrayImpl_size(swigCPtr);
    return ret;
  }

  public void erase(uint index, uint count) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_erase__SWIG_0(swigCPtr, index, count);
  }

  public void erase(uint index) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_erase__SWIG_1(swigCPtr, index);
  }

  public void assign(uint count, SWIGTYPE_p_int src) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_assign(swigCPtr, count, SWIGTYPE_p_int.getCPtr(src));
  }

  public void resize(uint count) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_resize(swigCPtr, count);
  }

  public void setSize(uint count) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_setSize(swigCPtr, count);
  }

  public void append(XsIntArrayImpl other) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_append(swigCPtr, XsIntArrayImpl.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsIntArrayImpl_empty(swigCPtr);
    return ret;
  }

  public void swap(XsIntArrayImpl other) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_swap__SWIG_0(swigCPtr, XsIntArrayImpl.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void swap(uint a, uint b) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_swap__SWIG_1(swigCPtr, a, b);
  }

  public SWIGTYPE_p_ptrdiff_t find(int needle) {
    SWIGTYPE_p_ptrdiff_t ret = new SWIGTYPE_p_ptrdiff_t(xsensdeviceapiPINVOKE.XsIntArrayImpl_find(swigCPtr, needle), true);
    return ret;
  }

  public void removeDuplicates() {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_removeDuplicates(swigCPtr);
  }

  public void removeDuplicatesPredicate(SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int predicate) {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_removeDuplicatesPredicate(swigCPtr, SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int.getCPtr(predicate));
  }

  public void sort() {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_sort(swigCPtr);
  }

  public void reverse() {
    xsensdeviceapiPINVOKE.XsIntArrayImpl_reverse(swigCPtr);
  }

}

}
