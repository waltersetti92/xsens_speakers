
//  ==> COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE <==
//  WARNING: COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO AN END USER LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  
//  THIS SOFTWARE CAN CONTAIN OPEN SOURCE COMPONENTS WHICH CAN BE SUBJECT TO 
//  THE FOLLOWING GENERAL PUBLIC LICENSES:
//  ==> Qt GNU LGPL version 3: http://doc.qt.io/qt-5/lgpl.html <==
//  ==> LAPACK BSD License:  http://www.netlib.org/lapack/LICENSE.txt <==
//  ==> StackWalker 3-Clause BSD License: https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE <==
//  ==> Icon Creative Commons 3.0: https://creativecommons.org/licenses/by/3.0/legalcode <==
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsVector : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public XsVector(uint sz, SWIGTYPE_p_double src) : this(xsensdeviceapiPINVOKE.new_XsVector__SWIG_0(sz, SWIGTYPE_p_double.getCPtr(src)), true) {
  }

  public XsVector(uint sz) : this(xsensdeviceapiPINVOKE.new_XsVector__SWIG_1(sz), true) {
  }

  public XsVector() : this(xsensdeviceapiPINVOKE.new_XsVector__SWIG_2(), true) {
  }

  public XsVector(XsVector other) : this(xsensdeviceapiPINVOKE.new_XsVector__SWIG_3(XsVector.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVector(SWIGTYPE_p_double ref_, uint sz, XsDataFlags flags_) : this(xsensdeviceapiPINVOKE.new_XsVector__SWIG_4(SWIGTYPE_p_double.getCPtr(ref_), sz, (int)flags_), true) {
  }

  public XsVector(SWIGTYPE_p_double ref_, uint sz) : this(xsensdeviceapiPINVOKE.new_XsVector__SWIG_5(SWIGTYPE_p_double.getCPtr(ref_), sz), true) {
  }

  public XsVector(XsVector other, SWIGTYPE_p_double ref_, uint sz, XsDataFlags flags_) : this(xsensdeviceapiPINVOKE.new_XsVector__SWIG_6(XsVector.getCPtr(other), SWIGTYPE_p_double.getCPtr(ref_), sz, (int)flags_), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVector(XsVector other, SWIGTYPE_p_double ref_, uint sz) : this(xsensdeviceapiPINVOKE.new_XsVector__SWIG_7(XsVector.getCPtr(other), SWIGTYPE_p_double.getCPtr(ref_), sz), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVector(XsQuaternion quat, double deltaT) : this(xsensdeviceapiPINVOKE.new_XsVector__SWIG_8(XsQuaternion.getCPtr(quat), deltaT), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void assign(uint sz, SWIGTYPE_p_double src) {
    xsensdeviceapiPINVOKE.XsVector_assign(swigCPtr, sz, SWIGTYPE_p_double.getCPtr(src));
  }

  public void setSize(uint sz) {
    xsensdeviceapiPINVOKE.XsVector_setSize(swigCPtr, sz);
  }

  public uint size() {
    uint ret = xsensdeviceapiPINVOKE.XsVector_size(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_double data() {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsVector_data(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_double at(uint index) {
    SWIGTYPE_p_double ret = new SWIGTYPE_p_double(xsensdeviceapiPINVOKE.XsVector_at__SWIG_0(swigCPtr, index), false);
    return ret;
  }

  public double value(uint index) {
    double ret = xsensdeviceapiPINVOKE.XsVector_value(swigCPtr, index);
    return ret;
  }

  public void setValue(uint index, double val) {
    xsensdeviceapiPINVOKE.XsVector_setValue(swigCPtr, index, val);
  }

  public double dotProduct(XsVector v) {
    double ret = xsensdeviceapiPINVOKE.XsVector_dotProduct(swigCPtr, XsVector.getCPtr(v));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double cartesianLength() {
    double ret = xsensdeviceapiPINVOKE.XsVector_cartesianLength(swigCPtr);
    return ret;
  }

  public void normalize() {
    xsensdeviceapiPINVOKE.XsVector_normalize(swigCPtr);
  }

  public void setZero() {
    xsensdeviceapiPINVOKE.XsVector_setZero(swigCPtr);
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsVector_empty(swigCPtr);
    return ret;
  }

  public XsVector angularVelocityFromQuaternion(XsQuaternion quat, double deltaT) {
    XsVector ret = new XsVector(xsensdeviceapiPINVOKE.XsVector_angularVelocityFromQuaternion(swigCPtr, XsQuaternion.getCPtr(quat), deltaT), false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isEqual(XsVector other, double epsilon) {
    bool ret = xsensdeviceapiPINVOKE.XsVector_isEqual(swigCPtr, XsVector.getCPtr(other), epsilon);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_double_t toVector() {
    SWIGTYPE_p_std__vectorT_double_t ret = new SWIGTYPE_p_std__vectorT_double_t(xsensdeviceapiPINVOKE.XsVector_toVector(swigCPtr), true);
    return ret;
  }

  public void zero() {
    xsensdeviceapiPINVOKE.XsVector_zero(swigCPtr);
  }

  public void fill(double val) {
    xsensdeviceapiPINVOKE.XsVector_fill(swigCPtr, val);
  }

  public void swap(XsVector b) {
    xsensdeviceapiPINVOKE.XsVector_swap(swigCPtr, XsVector.getCPtr(b));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void append(XsVector other) {
    xsensdeviceapiPINVOKE.XsVector_append(swigCPtr, XsVector.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    xsensdeviceapiPINVOKE.XsVector_clear(swigCPtr);
  }

  public void reverse() {
    xsensdeviceapiPINVOKE.XsVector_reverse(swigCPtr);
  }

}

}
