
//  ==> COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE <==
//  WARNING: COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO AN END USER LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  
//  THIS SOFTWARE CAN CONTAIN OPEN SOURCE COMPONENTS WHICH CAN BE SUBJECT TO 
//  THE FOLLOWING GENERAL PUBLIC LICENSES:
//  ==> Qt GNU LGPL version 3: http://doc.qt.io/qt-5/lgpl.html <==
//  ==> LAPACK BSD License:  http://www.netlib.org/lapack/LICENSE.txt <==
//  ==> StackWalker 3-Clause BSD License: https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE <==
//  ==> Icon Creative Commons 3.0: https://creativecommons.org/licenses/by/3.0/legalcode <==
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class xsensdeviceapi {
  public static string toXsString(XsDataFlags s) {
    string ret = xsensdeviceapiPINVOKE.toXsString__SWIG_0((int)s);
    return ret;
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsStringDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsStringDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static string makeNiceProductCode(string pc, int maxSz) {
    string ret = xsensdeviceapiPINVOKE.makeNiceProductCode__SWIG_0(pc, maxSz);
    return ret;
  }

  public static string makeNiceProductCode(string pc) {
    string ret = xsensdeviceapiPINVOKE.makeNiceProductCode__SWIG_1(pc);
    return ret;
  }

  public static string makeNiceProductCode(SWIGTYPE_p_unsigned_char pc, int maxSz) {
    string ret = xsensdeviceapiPINVOKE.makeNiceProductCode__SWIG_2(SWIGTYPE_p_unsigned_char.getCPtr(pc), maxSz);
    return ret;
  }

  public static string makeNiceProductCode(SWIGTYPE_p_unsigned_char pc) {
    string ret = xsensdeviceapiPINVOKE.makeNiceProductCode__SWIG_3(SWIGTYPE_p_unsigned_char.getCPtr(pc));
    return ret;
  }

  public static XsBaudRate codeToRate(XsBaudCode baudcode) {
    XsBaudRate ret = (XsBaudRate)xsensdeviceapiPINVOKE.codeToRate((int)baudcode);
    return ret;
  }

  public static XsBaudCode rateToCode(XsBaudRate baudrate) {
    XsBaudCode ret = (XsBaudCode)xsensdeviceapiPINVOKE.rateToCode((int)baudrate);
    return ret;
  }

  public static int rateToNumeric(XsBaudRate baudrate) {
    int ret = xsensdeviceapiPINVOKE.rateToNumeric((int)baudrate);
    return ret;
  }

  public static XsBaudRate numericToRate(int numeric) {
    XsBaudRate ret = (XsBaudRate)xsensdeviceapiPINVOKE.numericToRate(numeric);
    return ret;
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsByteArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsByteArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static double XsMath_e {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_e_get();
      return ret;
    } 
  }

  public static double XsMath_pi {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_pi_get();
      return ret;
    } 
  }

  public static double XsMath_tinyValue {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_tinyValue_get();
      return ret;
    } 
  }

  public static double XsMath_hugeValue {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_hugeValue_get();
      return ret;
    } 
  }

  public static double XsMath_epsilon {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_epsilon_get();
      return ret;
    } 
  }

  public static double XsMath_sqrtEpsilon {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_sqrtEpsilon_get();
      return ret;
    } 
  }

  public static double XsMath_denormalized {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_denormalized_get();
      return ret;
    } 
  }

  public static double XsMath_sqrtDenormalized {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_sqrtDenormalized_get();
      return ret;
    } 
  }

  public static double XsMath_rad2degValue {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_rad2degValue_get();
      return ret;
    } 
  }

  public static double XsMath_deg2radValue {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_deg2radValue_get();
      return ret;
    } 
  }

  public static double XsMath_zero {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_zero_get();
      return ret;
    } 
  }

  public static double XsMath_pt25 {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_pt25_get();
      return ret;
    } 
  }

  public static double XsMath_pt5 {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_pt5_get();
      return ret;
    } 
  }

  public static double XsMath_minusPt5 {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_minusPt5_get();
      return ret;
    } 
  }

  public static double XsMath_one {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_one_get();
      return ret;
    } 
  }

  public static double XsMath_minusOne {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_minusOne_get();
      return ret;
    } 
  }

  public static double XsMath_two {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_two_get();
      return ret;
    } 
  }

  public static double XsMath_four {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_four_get();
      return ret;
    } 
  }

  public static double XsMath_minusTwo {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_minusTwo_get();
      return ret;
    } 
  }

  public static double XsMath_minusHalfPi {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_minusHalfPi_get();
      return ret;
    } 
  }

  public static double XsMath_halfPi {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_halfPi_get();
      return ret;
    } 
  }

  public static double XsMath_twoPi {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_twoPi_get();
      return ret;
    } 
  }

  public static double XsMath_sqrt2 {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_sqrt2_get();
      return ret;
    } 
  }

  public static double XsMath_sqrtHalf {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_sqrtHalf_get();
      return ret;
    } 
  }

  public static double XsMath_infinity {
    get {
      double ret = xsensdeviceapiPINVOKE.XsMath_infinity_get();
      return ret;
    } 
  }

  public static double e {
    get {
      double ret = xsensdeviceapiPINVOKE.e_get();
      return ret;
    } 
  }

  public static double pi {
    get {
      double ret = xsensdeviceapiPINVOKE.pi_get();
      return ret;
    } 
  }

  public static double tinyValue {
    get {
      double ret = xsensdeviceapiPINVOKE.tinyValue_get();
      return ret;
    } 
  }

  public static double hugeValue {
    get {
      double ret = xsensdeviceapiPINVOKE.hugeValue_get();
      return ret;
    } 
  }

  public static double epsilon {
    get {
      double ret = xsensdeviceapiPINVOKE.epsilon_get();
      return ret;
    } 
  }

  public static double sqrtEpsilon {
    get {
      double ret = xsensdeviceapiPINVOKE.sqrtEpsilon_get();
      return ret;
    } 
  }

  public static double denormalized {
    get {
      double ret = xsensdeviceapiPINVOKE.denormalized_get();
      return ret;
    } 
  }

  public static double sqrtDenormalized {
    get {
      double ret = xsensdeviceapiPINVOKE.sqrtDenormalized_get();
      return ret;
    } 
  }

  public static double rad2degValue {
    get {
      double ret = xsensdeviceapiPINVOKE.rad2degValue_get();
      return ret;
    } 
  }

  public static double deg2radValue {
    get {
      double ret = xsensdeviceapiPINVOKE.deg2radValue_get();
      return ret;
    } 
  }

  public static double zero {
    get {
      double ret = xsensdeviceapiPINVOKE.zero_get();
      return ret;
    } 
  }

  public static double pt25 {
    get {
      double ret = xsensdeviceapiPINVOKE.pt25_get();
      return ret;
    } 
  }

  public static double pt5 {
    get {
      double ret = xsensdeviceapiPINVOKE.pt5_get();
      return ret;
    } 
  }

  public static double minusPt5 {
    get {
      double ret = xsensdeviceapiPINVOKE.minusPt5_get();
      return ret;
    } 
  }

  public static double one {
    get {
      double ret = xsensdeviceapiPINVOKE.one_get();
      return ret;
    } 
  }

  public static double minusOne {
    get {
      double ret = xsensdeviceapiPINVOKE.minusOne_get();
      return ret;
    } 
  }

  public static double two {
    get {
      double ret = xsensdeviceapiPINVOKE.two_get();
      return ret;
    } 
  }

  public static double four {
    get {
      double ret = xsensdeviceapiPINVOKE.four_get();
      return ret;
    } 
  }

  public static double minusTwo {
    get {
      double ret = xsensdeviceapiPINVOKE.minusTwo_get();
      return ret;
    } 
  }

  public static double minusHalfPi {
    get {
      double ret = xsensdeviceapiPINVOKE.minusHalfPi_get();
      return ret;
    } 
  }

  public static double halfPi {
    get {
      double ret = xsensdeviceapiPINVOKE.halfPi_get();
      return ret;
    } 
  }

  public static double twoPi {
    get {
      double ret = xsensdeviceapiPINVOKE.twoPi_get();
      return ret;
    } 
  }

  public static double sqrt2 {
    get {
      double ret = xsensdeviceapiPINVOKE.sqrt2_get();
      return ret;
    } 
  }

  public static double sqrtHalf {
    get {
      double ret = xsensdeviceapiPINVOKE.sqrtHalf_get();
      return ret;
    } 
  }

  public static double infinity {
    get {
      double ret = xsensdeviceapiPINVOKE.infinity_get();
      return ret;
    } 
  }

  public static double asinClamped(double x) {
    double ret = xsensdeviceapiPINVOKE.asinClamped(x);
    return ret;
  }

  public static double rad2deg(double radians) {
    double ret = xsensdeviceapiPINVOKE.rad2deg(radians);
    return ret;
  }

  public static double deg2rad(double degrees) {
    double ret = xsensdeviceapiPINVOKE.deg2rad(degrees);
    return ret;
  }

  public static double pow2(double a) {
    double ret = xsensdeviceapiPINVOKE.pow2(a);
    return ret;
  }

  public static double pow3(double a) {
    double ret = xsensdeviceapiPINVOKE.pow3(a);
    return ret;
  }

  public static int doubleToLong(double d) {
    int ret = xsensdeviceapiPINVOKE.doubleToLong(d);
    return ret;
  }

  public static long doubleToInt64(double d) {
    long ret = xsensdeviceapiPINVOKE.doubleToInt64(d);
    return ret;
  }

  public static void swap(XsVector first, XsVector second) {
    xsensdeviceapiPINVOKE.swap__SWIG_1(XsVector.getCPtr(first), XsVector.getCPtr(second));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsCanOutputConfigurationArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsCanOutputConfigurationArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static void swap(XsQuaternion first, XsQuaternion second) {
    xsensdeviceapiPINVOKE.swap__SWIG_2(XsQuaternion.getCPtr(first), XsQuaternion.getCPtr(second));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void swap(XsMatrix first, XsMatrix second) {
    xsensdeviceapiPINVOKE.swap__SWIG_3(XsMatrix.getCPtr(first), XsMatrix.getCPtr(second));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void swap(XsFingerData first, XsFingerData second) {
    xsensdeviceapiPINVOKE.swap__SWIG_4(XsFingerData.getCPtr(first), XsFingerData.getCPtr(second));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void swap(XsGloveData first, XsGloveData second) {
    xsensdeviceapiPINVOKE.swap__SWIG_5(XsGloveData.getCPtr(first), XsGloveData.getCPtr(second));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsDataPacketPtrArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsDataPacketPtrArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsDeviceIdArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsDeviceIdArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static void swap(XsFilterProfile first, XsFilterProfile second) {
    xsensdeviceapiPINVOKE.swap__SWIG_6(XsFilterProfile.getCPtr(first), XsFilterProfile.getCPtr(second));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsFilterProfileArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsFilterProfileArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsInt64ArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsInt64ArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsIntArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsIntArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_void xsMalloc(uint sz) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.xsMalloc(sz);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void xsRealloc(SWIGTYPE_p_void ptr, uint sz) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.xsRealloc(SWIGTYPE_p_void.getCPtr(ptr), sz);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void xsFree(SWIGTYPE_p_void ptr) {
    xsensdeviceapiPINVOKE.xsFree(SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static SWIGTYPE_p_void xsAlignedMalloc(uint sz) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.xsAlignedMalloc(sz);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void xsAlignedRealloc(SWIGTYPE_p_void ptr, uint sz) {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.xsAlignedRealloc(SWIGTYPE_p_void.getCPtr(ptr), sz);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void xsAlignedFree(SWIGTYPE_p_void ptr) {
    xsensdeviceapiPINVOKE.xsAlignedFree(SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsMessageArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsMessageArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsOutputConfigurationArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsOutputConfigurationArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsPortInfoArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsPortInfoArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsQuaternionArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsQuaternionArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static int bias {
    get {
      int ret = xsensdeviceapiPINVOKE.bias_get();
      return ret;
    } 
  }

  public static int max {
    get {
      int ret = xsensdeviceapiPINVOKE.max_get();
      return ret;
    } 
  }

  public static int unknown {
    get {
      int ret = xsensdeviceapiPINVOKE.unknown_get();
      return ret;
    } 
  }

  public static int maxUnbiased {
    get {
      int ret = xsensdeviceapiPINVOKE.maxUnbiased_get();
      return ret;
    } 
  }

  public static int unknownUnbiased {
    get {
      int ret = xsensdeviceapiPINVOKE.unknownUnbiased_get();
      return ret;
    } 
  }

  public static int unbiased(int raw) {
    int ret = xsensdeviceapiPINVOKE.unbiased(raw);
    return ret;
  }

  public static void findHardwareTypeC(XsString productCode, XsString resultValue) {
    xsensdeviceapiPINVOKE.findHardwareTypeC(XsString.getCPtr(productCode), XsString.getCPtr(resultValue));
  }

  public static HardwareManufacturerType findHardwareManufacturerC(XsString productCode) {
    HardwareManufacturerType ret = (HardwareManufacturerType)xsensdeviceapiPINVOKE.findHardwareManufacturerC(XsString.getCPtr(productCode));
    return ret;
  }

  public static double accelerometerRangeC(XsString productCode, int hwVersionMajor) {
    double ret = xsensdeviceapiPINVOKE.accelerometerRangeC(XsString.getCPtr(productCode), hwVersionMajor);
    return ret;
  }

  public static double gyroscopeRangeC(XsString productCode) {
    double ret = xsensdeviceapiPINVOKE.gyroscopeRangeC(XsString.getCPtr(productCode));
    return ret;
  }

  public static double actualAccelerometerRangeC(XsString productCode, int hwVersionMajor) {
    double ret = xsensdeviceapiPINVOKE.actualAccelerometerRangeC(XsString.getCPtr(productCode), hwVersionMajor);
    return ret;
  }

  public static double actualGyroscopeRangeC(XsString productCode) {
    double ret = xsensdeviceapiPINVOKE.actualGyroscopeRangeC(XsString.getCPtr(productCode));
    return ret;
  }

  public static XsString findHardwareType(XsString productCode) {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.findHardwareType(XsString.getCPtr(productCode)), true);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static HardwareManufacturerType findHardwareManufacturer(XsString productCode) {
    HardwareManufacturerType ret = (HardwareManufacturerType)xsensdeviceapiPINVOKE.findHardwareManufacturer(XsString.getCPtr(productCode));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double accelerometerRange(XsString productCode, int hwVersionMajor) {
    double ret = xsensdeviceapiPINVOKE.accelerometerRange(XsString.getCPtr(productCode), hwVersionMajor);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double gyroscopeRange(XsString productCode) {
    double ret = xsensdeviceapiPINVOKE.gyroscopeRange(XsString.getCPtr(productCode));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double actualAccelerometerRange(XsString productCode, int hwVersionMajor) {
    double ret = xsensdeviceapiPINVOKE.actualAccelerometerRange(XsString.getCPtr(productCode), hwVersionMajor);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double actualGyroscopeRange(XsString productCode) {
    double ret = xsensdeviceapiPINVOKE.actualGyroscopeRange(XsString.getCPtr(productCode));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool anyAccClipped(int status) {
    bool ret = xsensdeviceapiPINVOKE.anyAccClipped(status);
    return ret;
  }

  public static bool anyGyrClipped(int status) {
    bool ret = xsensdeviceapiPINVOKE.anyGyrClipped(status);
    return ret;
  }

  public static bool anyMagClipped(int status) {
    bool ret = xsensdeviceapiPINVOKE.anyMagClipped(status);
    return ret;
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsStringArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsStringArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsStringOutputTypeArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsStringOutputTypeArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static void swap(XsSyncSetting first, XsSyncSetting second) {
    xsensdeviceapiPINVOKE.swap__SWIG_7(XsSyncSetting.getCPtr(first), XsSyncSetting.getCPtr(second));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsSyncSettingArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsSyncSettingArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static XsTimeStamp XsTime_secPerDay {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsTime_secPerDay_get();
      XsTimeStamp ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsTimeStamp(cPtr, false);
      return ret;
    } 
  }

  public static XsTimeStamp XsTime_milliSecPerDay {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsTime_milliSecPerDay_get();
      XsTimeStamp ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsTimeStamp(cPtr, false);
      return ret;
    } 
  }

  public static XsTimeStamp XsTime_timeStampMax {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsTime_timeStampMax_get();
      XsTimeStamp ret = (cPtr == global::System.IntPtr.Zero) ? null : new XsTimeStamp(cPtr, false);
      return ret;
    } 
  }

  public static XsTimeStamp secPerDay {
    get {
      XsTimeStamp ret = new XsTimeStamp(xsensdeviceapiPINVOKE.secPerDay_get(), false);
      return ret;
    } 
  }

  public static XsTimeStamp milliSecPerDay {
    get {
      XsTimeStamp ret = new XsTimeStamp(xsensdeviceapiPINVOKE.milliSecPerDay_get(), false);
      return ret;
    } 
  }

  public static XsTimeStamp timeStampMax {
    get {
      XsTimeStamp ret = new XsTimeStamp(xsensdeviceapiPINVOKE.timeStampMax_get(), false);
      return ret;
    } 
  }

  public static uint getTimeOfDay(SWIGTYPE_p_tm date_, SWIGTYPE_p_time_t secs_) {
    uint ret = xsensdeviceapiPINVOKE.getTimeOfDay__SWIG_0(SWIGTYPE_p_tm.getCPtr(date_), SWIGTYPE_p_time_t.getCPtr(secs_));
    return ret;
  }

  public static uint getTimeOfDay(SWIGTYPE_p_tm date_) {
    uint ret = xsensdeviceapiPINVOKE.getTimeOfDay__SWIG_1(SWIGTYPE_p_tm.getCPtr(date_));
    return ret;
  }

  public static uint getTimeOfDay() {
    uint ret = xsensdeviceapiPINVOKE.getTimeOfDay__SWIG_2();
    return ret;
  }

  public static long getDateTime(SWIGTYPE_p_tm date) {
    long ret = xsensdeviceapiPINVOKE.getDateTime__SWIG_0(SWIGTYPE_p_tm.getCPtr(date));
    return ret;
  }

  public static long getDateTime() {
    long ret = xsensdeviceapiPINVOKE.getDateTime__SWIG_1();
    return ret;
  }

  public static void getDateAsString(ref string dest, SWIGTYPE_p_tm date) {
    xsensdeviceapiPINVOKE.getDateAsString__SWIG_0(ref dest, SWIGTYPE_p_tm.getCPtr(date));
  }

  public static void getDateAsString(ref string dest) {
    xsensdeviceapiPINVOKE.getDateAsString__SWIG_1(ref dest);
  }

  public static void getTimeAsString(ref string dest, SWIGTYPE_p_tm date) {
    xsensdeviceapiPINVOKE.getTimeAsString__SWIG_0(ref dest, SWIGTYPE_p_tm.getCPtr(date));
  }

  public static void getTimeAsString(ref string dest) {
    xsensdeviceapiPINVOKE.getTimeAsString__SWIG_1(ref dest);
  }

  public static XsString getDateAsString(SWIGTYPE_p_tm date) {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.getDateAsString__SWIG_2(SWIGTYPE_p_tm.getCPtr(date)), true);
    return ret;
  }

  public static XsString getDateAsString() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.getDateAsString__SWIG_3(), true);
    return ret;
  }

  public static XsString getTimeAsString(SWIGTYPE_p_tm time) {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.getTimeAsString__SWIG_2(SWIGTYPE_p_tm.getCPtr(time)), true);
    return ret;
  }

  public static XsString getTimeAsString() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.getTimeAsString__SWIG_3(), true);
    return ret;
  }

  public static void msleep(uint ms) {
    xsensdeviceapiPINVOKE.msleep(ms);
  }

  public static void udelay(ulong us) {
    xsensdeviceapiPINVOKE.udelay(us);
  }

  public static void initializeTime() {
    xsensdeviceapiPINVOKE.initializeTime();
  }

  public static long timeStampNow(XsTimeStamp now) {
    long ret = xsensdeviceapiPINVOKE.timeStampNow__SWIG_0(XsTimeStamp.getCPtr(now));
    return ret;
  }

  public static long timeStampNow() {
    long ret = xsensdeviceapiPINVOKE.timeStampNow__SWIG_1();
    return ret;
  }

  public static void xsNameThisThread(string threadName) {
    xsensdeviceapiPINVOKE.xsNameThisThread(threadName);
  }

  public static void xstypesPath(XsString path) {
    xsensdeviceapiPINVOKE.xstypesPath(XsString.getCPtr(path));
  }

  public static void xsTypesVersion(XsVersion version) {
    xsensdeviceapiPINVOKE.xsTypesVersion__SWIG_0(XsVersion.getCPtr(version));
  }

  public static XsVersion xsTypesVersion() {
    XsVersion ret = new XsVersion(xsensdeviceapiPINVOKE.xsTypesVersion__SWIG_1(), true);
    return ret;
  }

  public static void xdaDllPath(XsString path) {
    xsensdeviceapiPINVOKE.xdaDllPath(XsString.getCPtr(path));
  }

  public static void xdaVersion(XsVersion version) {
    xsensdeviceapiPINVOKE.xdaVersion(XsVersion.getCPtr(version));
  }

  public static void xdaSetLogPath(XsString path) {
    xsensdeviceapiPINVOKE.xdaSetLogPath(XsString.getCPtr(path));
  }

  public static void xdaTerminate() {
    xsensdeviceapiPINVOKE.xdaTerminate();
  }

  public static void xdaEnableNetworkScanning() {
    xsensdeviceapiPINVOKE.xdaEnableNetworkScanning();
  }

  public static void xdaDisableNetworkScanning() {
    xsensdeviceapiPINVOKE.xdaDisableNetworkScanning();
  }

  public static string xdaDefaultLogFileName() {
    string ret = xsensdeviceapiPINVOKE.xdaDefaultLogFileName();
    return ret;
  }

  public static void xdaSetThreadPoolInstance(SWIGTYPE_p_void arg0) {
    xsensdeviceapiPINVOKE.xdaSetThreadPoolInstance(SWIGTYPE_p_void.getCPtr(arg0));
  }

  public static void xdaReadMtbMetaData(XsByteArray metadata, XsString mtbFileName) {
    xsensdeviceapiPINVOKE.xdaReadMtbMetaData(XsByteArray.getCPtr(metadata), XsString.getCPtr(mtbFileName));
  }

  public static void xdaSetLogger(SWIGTYPE_p_Journaller journaller) {
    xsensdeviceapiPINVOKE.xdaSetLogger(SWIGTYPE_p_Journaller.getCPtr(journaller));
  }

  public static SWIGTYPE_p_Journaller xdaGetLogger() {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.xdaGetLogger();
    SWIGTYPE_p_Journaller ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Journaller(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_XsArrayDescriptor g_xsDevicePtrArrayDescriptor {
    get {
      global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.g_xsDevicePtrArrayDescriptor_get();
      SWIGTYPE_p_XsArrayDescriptor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XsArrayDescriptor(cPtr, false);
      return ret;
    } 
  }

  public static string toXsString(XsRejectReason r) {
    string ret = xsensdeviceapiPINVOKE.toXsString__SWIG_1((int)r);
    return ret;
  }

  public static int xsScaleBatteryLevel(int batteryLevel) {
    int ret = xsensdeviceapiPINVOKE.xsScaleBatteryLevel(batteryLevel);
    return ret;
  }

  public static readonly int THREAD_PRIORITY_IDLE = xsensdeviceapiPINVOKE.THREAD_PRIORITY_IDLE_get();
  public static readonly int THREAD_PRIORITY_LOWEST = xsensdeviceapiPINVOKE.THREAD_PRIORITY_LOWEST_get();
  public static readonly int THREAD_PRIORITY_BELOW_NORMAL = xsensdeviceapiPINVOKE.THREAD_PRIORITY_BELOW_NORMAL_get();
  public static readonly int THREAD_PRIORITY_NORMAL = xsensdeviceapiPINVOKE.THREAD_PRIORITY_NORMAL_get();
  public static readonly int THREAD_PRIORITY_ABOVE_NORMAL = xsensdeviceapiPINVOKE.THREAD_PRIORITY_ABOVE_NORMAL_get();
  public static readonly int THREAD_PRIORITY_HIGHEST = xsensdeviceapiPINVOKE.THREAD_PRIORITY_HIGHEST_get();
  public static readonly int THREAD_PRIORITY_TIME_CRITICAL = xsensdeviceapiPINVOKE.THREAD_PRIORITY_TIME_CRITICAL_get();
  public static readonly int CBR_110 = xsensdeviceapiPINVOKE.CBR_110_get();
  public static readonly int CBR_300 = xsensdeviceapiPINVOKE.CBR_300_get();
  public static readonly int CBR_600 = xsensdeviceapiPINVOKE.CBR_600_get();
  public static readonly int CBR_1200 = xsensdeviceapiPINVOKE.CBR_1200_get();
  public static readonly int CBR_2400 = xsensdeviceapiPINVOKE.CBR_2400_get();
  public static readonly int CBR_4800 = xsensdeviceapiPINVOKE.CBR_4800_get();
  public static readonly int CBR_9600 = xsensdeviceapiPINVOKE.CBR_9600_get();
  public static readonly int CBR_14400 = xsensdeviceapiPINVOKE.CBR_14400_get();
  public static readonly int CBR_19200 = xsensdeviceapiPINVOKE.CBR_19200_get();
  public static readonly int CBR_38400 = xsensdeviceapiPINVOKE.CBR_38400_get();
  public static readonly int CBR_56000 = xsensdeviceapiPINVOKE.CBR_56000_get();
  public static readonly int CBR_57600 = xsensdeviceapiPINVOKE.CBR_57600_get();
  public static readonly int CBR_115200 = xsensdeviceapiPINVOKE.CBR_115200_get();
  public static readonly int CBR_128000 = xsensdeviceapiPINVOKE.CBR_128000_get();
  public static readonly int CBR_256000 = xsensdeviceapiPINVOKE.CBR_256000_get();
  public static readonly string __LOC__ = xsensdeviceapiPINVOKE.__LOC___get();
  public static readonly int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = xsensdeviceapiPINVOKE._CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_get();
  public static readonly string XSENS_PFSHARED = xsensdeviceapiPINVOKE.XSENS_PFSHARED_get();
  public static readonly string XSENS_PFPRE = xsensdeviceapiPINVOKE.XSENS_PFPRE_get();
  public static readonly string XSENS_PFBITS = xsensdeviceapiPINVOKE.XSENS_PFBITS_get();
  public static readonly int QT_NO_DEBUG = xsensdeviceapiPINVOKE.QT_NO_DEBUG_get();
  public static readonly string XSENS_PFCONF = xsensdeviceapiPINVOKE.XSENS_PFCONF_get();
  public static readonly string XSENS_PFFULL = xsensdeviceapiPINVOKE.XSENS_PFFULL_get();
  public static readonly int XSREAL_ALLOWS_MEMCPY = xsensdeviceapiPINVOKE.XSREAL_ALLOWS_MEMCPY_get();
  public static readonly int XSDEVICEID_PRODUCT_CODE_LEN = xsensdeviceapiPINVOKE.XSDEVICEID_PRODUCT_CODE_LEN_get();
  public static readonly string XSDEVICEID_PRODUCT_CODE_INIT = xsensdeviceapiPINVOKE.XSDEVICEID_PRODUCT_CODE_INIT_get();
  public static readonly int XSENS_VENDOR_ID = xsensdeviceapiPINVOKE.XSENS_VENDOR_ID_get();
  public static readonly int FTDI_VENDOR_ID = xsensdeviceapiPINVOKE.FTDI_VENDOR_ID_get();
  public static readonly int XS_BID_MASTER = xsensdeviceapiPINVOKE.XS_BID_MASTER_get();
  public static readonly int XS_BID_BROADCAST = xsensdeviceapiPINVOKE.XS_BID_BROADCAST_get();
  public static readonly int XS_BID_MT = xsensdeviceapiPINVOKE.XS_BID_MT_get();
  public static readonly int XS_BID_INVALID = xsensdeviceapiPINVOKE.XS_BID_INVALID_get();
  public static readonly int XS_BID_DYNAMIC = xsensdeviceapiPINVOKE.XS_BID_DYNAMIC_get();
  public static readonly int WANTXSMATH2 = xsensdeviceapiPINVOKE.WANTXSMATH2_get();
  public static readonly int XCDI_MAX_FREQUENCY_VAL = xsensdeviceapiPINVOKE.XCDI_MAX_FREQUENCY_VAL_get();
  public static readonly int XS_MAX_CANOUTPUTCONFIGURATIONS = xsensdeviceapiPINVOKE.XS_MAX_CANOUTPUTCONFIGURATIONS_get();
  public static readonly int XDI_MAX_FREQUENCY_VAL = xsensdeviceapiPINVOKE.XDI_MAX_FREQUENCY_VAL_get();
  public static readonly int XS_PREAMBLE = xsensdeviceapiPINVOKE.XS_PREAMBLE_get();
  public static readonly int XS_EXTLENCODE = xsensdeviceapiPINVOKE.XS_EXTLENCODE_get();
  public static readonly int XS_LEN_MSGHEADER = xsensdeviceapiPINVOKE.XS_LEN_MSGHEADER_get();
  public static readonly int XS_LEN_MSGEXTHEADER = xsensdeviceapiPINVOKE.XS_LEN_MSGEXTHEADER_get();
  public static readonly int XS_LEN_MSGHEADERCS = xsensdeviceapiPINVOKE.XS_LEN_MSGHEADERCS_get();
  public static readonly int XS_LEN_MSGEXTHEADERCS = xsensdeviceapiPINVOKE.XS_LEN_MSGEXTHEADERCS_get();
  public static readonly int XS_LEN_CHECKSUM = xsensdeviceapiPINVOKE.XS_LEN_CHECKSUM_get();
  public static readonly int XS_LEN_UNSIGSHORT = xsensdeviceapiPINVOKE.XS_LEN_UNSIGSHORT_get();
  public static readonly int XS_LEN_UNSIGINT = xsensdeviceapiPINVOKE.XS_LEN_UNSIGINT_get();
  public static readonly int XS_LEN_FLOAT = xsensdeviceapiPINVOKE.XS_LEN_FLOAT_get();
  public static readonly int XS_MAXDATALEN = xsensdeviceapiPINVOKE.XS_MAXDATALEN_get();
  public static readonly int XS_MAXSHORTDATALEN = xsensdeviceapiPINVOKE.XS_MAXSHORTDATALEN_get();
  public static readonly int XS_MAXMSGLEN = xsensdeviceapiPINVOKE.XS_MAXMSGLEN_get();
  public static readonly int XS_MAXSHORTMSGLEN = xsensdeviceapiPINVOKE.XS_MAXSHORTMSGLEN_get();
  public static readonly int XS_MAXGARBAGE = xsensdeviceapiPINVOKE.XS_MAXGARBAGE_get();
  public static readonly int GNSS_PVT_FLAGS_GNSS_FIX_NONE = xsensdeviceapiPINVOKE.GNSS_PVT_FLAGS_GNSS_FIX_NONE_get();
  public static readonly int GNSS_PVT_FLAGS_GNSS_FIX_SINGLE = xsensdeviceapiPINVOKE.GNSS_PVT_FLAGS_GNSS_FIX_SINGLE_get();
  public static readonly int GNSS_PVT_FLAGS_GNSS_FIX_DIFFERENTIAL = xsensdeviceapiPINVOKE.GNSS_PVT_FLAGS_GNSS_FIX_DIFFERENTIAL_get();
  public static readonly int GNSS_PVT_FLAGS_CARRIER_SOLUTION_NONE = xsensdeviceapiPINVOKE.GNSS_PVT_FLAGS_CARRIER_SOLUTION_NONE_get();
  public static readonly int GNSS_PVT_FLAGS_CARRIER_SOLUTION_FLOATING = xsensdeviceapiPINVOKE.GNSS_PVT_FLAGS_CARRIER_SOLUTION_FLOATING_get();
  public static readonly int GNSS_PVT_FLAGS_CARRIER_SOLUTION_FIXED = xsensdeviceapiPINVOKE.GNSS_PVT_FLAGS_CARRIER_SOLUTION_FIXED_get();
  public static readonly int GNSS_ACCURACY_DEFAULT_DEVIATION = xsensdeviceapiPINVOKE.GNSS_ACCURACY_DEFAULT_DEVIATION_get();
  public static readonly int FSFL_ClipAccShift = xsensdeviceapiPINVOKE.FSFL_ClipAccShift_get();
  public static readonly int FSFL_ClipGyrShift = xsensdeviceapiPINVOKE.FSFL_ClipGyrShift_get();
  public static readonly int FSFL_ClipMagshift = xsensdeviceapiPINVOKE.FSFL_ClipMagshift_get();
  public static readonly int FSFL_RotationShift = xsensdeviceapiPINVOKE.FSFL_RotationShift_get();
  public static readonly int XSFINGERSEGMENTCOUNT = xsensdeviceapiPINVOKE.XSFINGERSEGMENTCOUNT_get();
  public static readonly int XS_DID_TYPEL_MASK = xsensdeviceapiPINVOKE.XS_DID_TYPEL_MASK_get();
  public static readonly int XS_DID_TYPEH_MASK = xsensdeviceapiPINVOKE.XS_DID_TYPEH_MASK_get();
  public static readonly int XS_DID_GPL_MASK = xsensdeviceapiPINVOKE.XS_DID_GPL_MASK_get();
  public static readonly int XS_DID_GPH_MASK = xsensdeviceapiPINVOKE.XS_DID_GPH_MASK_get();
  public static readonly int XS_DID_TYPE_MASK = xsensdeviceapiPINVOKE.XS_DID_TYPE_MASK_get();
  public static readonly int XS_DID_GP_MASK = xsensdeviceapiPINVOKE.XS_DID_GP_MASK_get();
  public static readonly int XS_DID_MK4TYPE_MASK = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MASK_get();
  public static readonly int XS_DID_ID_MASK = xsensdeviceapiPINVOKE.XS_DID_ID_MASK_get();
  public static readonly int XS_DID_FULLTYPE_MASK = xsensdeviceapiPINVOKE.XS_DID_FULLTYPE_MASK_get();
  public static readonly int XS_DID_TYPEL_SHIFT = xsensdeviceapiPINVOKE.XS_DID_TYPEL_SHIFT_get();
  public static readonly int XS_DID_TYPEH_SHIFT = xsensdeviceapiPINVOKE.XS_DID_TYPEH_SHIFT_get();
  public static readonly int XS_DID_GPL_SHIFT = xsensdeviceapiPINVOKE.XS_DID_GPL_SHIFT_get();
  public static readonly int XS_DID_GPH_SHIFT = xsensdeviceapiPINVOKE.XS_DID_GPH_SHIFT_get();
  public static readonly int XS_DID_TYPEH_INTERNAL = xsensdeviceapiPINVOKE.XS_DID_TYPEH_INTERNAL_get();
  public static readonly int XS_DID_TYPEH_AWINDAMASTER = xsensdeviceapiPINVOKE.XS_DID_TYPEH_AWINDAMASTER_get();
  public static readonly int XS_DID_TYPEH_MT_X0 = xsensdeviceapiPINVOKE.XS_DID_TYPEH_MT_X0_get();
  public static readonly int XS_DID_TYPEH_MT_X00 = xsensdeviceapiPINVOKE.XS_DID_TYPEH_MT_X00_get();
  public static readonly int XS_DID_TYPEH_MTX2_MTW2 = xsensdeviceapiPINVOKE.XS_DID_TYPEH_MTX2_MTW2_get();
  public static readonly int XS_DID_TYPEH_BODYPACK = xsensdeviceapiPINVOKE.XS_DID_TYPEH_BODYPACK_get();
  public static readonly int XS_DID_TYPEH_MT_3X0 = xsensdeviceapiPINVOKE.XS_DID_TYPEH_MT_3X0_get();
  public static readonly int XS_DID_TYPEH_MT_X_MPU = xsensdeviceapiPINVOKE.XS_DID_TYPEH_MT_X_MPU_get();
  public static readonly int XS_DID_TYPEL_STATION = xsensdeviceapiPINVOKE.XS_DID_TYPEL_STATION_get();
  public static readonly int XS_DID_TYPEL_DONGLE = xsensdeviceapiPINVOKE.XS_DID_TYPEL_DONGLE_get();
  public static readonly int XS_DID_TYPEL_OEM = xsensdeviceapiPINVOKE.XS_DID_TYPEL_OEM_get();
  public static readonly int XS_DID_TYPEL_SYNCSTATION = xsensdeviceapiPINVOKE.XS_DID_TYPEL_SYNCSTATION_get();
  public static readonly int XS_DID_TYPEL_BUS_MASTER = xsensdeviceapiPINVOKE.XS_DID_TYPEL_BUS_MASTER_get();
  public static readonly int XS_DID_TYPEL_DONGLE_ANT = xsensdeviceapiPINVOKE.XS_DID_TYPEL_DONGLE_ANT_get();
  public static readonly int XS_DID_TYPEL_RS232 = xsensdeviceapiPINVOKE.XS_DID_TYPEL_RS232_get();
  public static readonly int XS_DID_TYPEL_RS422 = xsensdeviceapiPINVOKE.XS_DID_TYPEL_RS422_get();
  public static readonly int XS_DID_TYPEL_RS485XM = xsensdeviceapiPINVOKE.XS_DID_TYPEL_RS485XM_get();
  public static readonly int XS_DID_TYPEL_RS485 = xsensdeviceapiPINVOKE.XS_DID_TYPEL_RS485_get();
  public static readonly int XS_DID_TYPEL_WIRELESS = xsensdeviceapiPINVOKE.XS_DID_TYPEL_WIRELESS_get();
  public static readonly int XS_DID_TYPEL_COMM_MASK = xsensdeviceapiPINVOKE.XS_DID_TYPEL_COMM_MASK_get();
  public static readonly int XS_DID_TYPEL_MULTI = xsensdeviceapiPINVOKE.XS_DID_TYPEL_MULTI_get();
  public static readonly int XS_DID_TYPEL_MK5 = xsensdeviceapiPINVOKE.XS_DID_TYPEL_MK5_get();
  public static readonly int XS_DID_GPL_1 = xsensdeviceapiPINVOKE.XS_DID_GPL_1_get();
  public static readonly int XS_DID_GPL_2 = xsensdeviceapiPINVOKE.XS_DID_GPL_2_get();
  public static readonly int XS_DID_GPL_3 = xsensdeviceapiPINVOKE.XS_DID_GPL_3_get();
  public static readonly int XS_DID_GPL_7 = xsensdeviceapiPINVOKE.XS_DID_GPL_7_get();
  public static readonly int XS_DID_GPL_8 = xsensdeviceapiPINVOKE.XS_DID_GPL_8_get();
  public static readonly int XS_DID_GPL_10 = xsensdeviceapiPINVOKE.XS_DID_GPL_10_get();
  public static readonly int XS_DID_GPL_20 = xsensdeviceapiPINVOKE.XS_DID_GPL_20_get();
  public static readonly int XS_DID_GPL_30 = xsensdeviceapiPINVOKE.XS_DID_GPL_30_get();
  public static readonly int XS_DID_GPL_100 = xsensdeviceapiPINVOKE.XS_DID_GPL_100_get();
  public static readonly int XS_DID_GPL_200 = xsensdeviceapiPINVOKE.XS_DID_GPL_200_get();
  public static readonly int XS_DID_GPL_300 = xsensdeviceapiPINVOKE.XS_DID_GPL_300_get();
  public static readonly int XS_DID_GPL_400 = xsensdeviceapiPINVOKE.XS_DID_GPL_400_get();
  public static readonly int XS_DID_GPL_500 = xsensdeviceapiPINVOKE.XS_DID_GPL_500_get();
  public static readonly int XS_DID_GPL_600 = xsensdeviceapiPINVOKE.XS_DID_GPL_600_get();
  public static readonly int XS_DID_GPL_700 = xsensdeviceapiPINVOKE.XS_DID_GPL_700_get();
  public static readonly int XS_DID_GPL_800 = xsensdeviceapiPINVOKE.XS_DID_GPL_800_get();
  public static readonly int XS_DID_GPL_900 = xsensdeviceapiPINVOKE.XS_DID_GPL_900_get();
  public static readonly int XS_DID_GPL_IMU = xsensdeviceapiPINVOKE.XS_DID_GPL_IMU_get();
  public static readonly int XS_DID_GPL_VRU = xsensdeviceapiPINVOKE.XS_DID_GPL_VRU_get();
  public static readonly int XS_DID_GPL_AHRS = xsensdeviceapiPINVOKE.XS_DID_GPL_AHRS_get();
  public static readonly int XS_DID_GPL_AWINDA2 = xsensdeviceapiPINVOKE.XS_DID_GPL_AWINDA2_get();
  public static readonly int XS_DID_GPL_AHRSGNSS = xsensdeviceapiPINVOKE.XS_DID_GPL_AHRSGNSS_get();
  public static readonly int XS_DID_GPL_AHRSGNSSG = xsensdeviceapiPINVOKE.XS_DID_GPL_AHRSGNSSG_get();
  public static readonly int XS_DID_GPL_GNSSINS = xsensdeviceapiPINVOKE.XS_DID_GPL_GNSSINS_get();
  public static readonly int XS_DID_GPL_GNSSINSG = xsensdeviceapiPINVOKE.XS_DID_GPL_GNSSINSG_get();
  public static readonly int XS_DID_TYPE_AWINDA = xsensdeviceapiPINVOKE.XS_DID_TYPE_AWINDA_get();
  public static readonly int XS_DID_TYPE_AWINDA_STATION = xsensdeviceapiPINVOKE.XS_DID_TYPE_AWINDA_STATION_get();
  public static readonly int XS_DID_TYPE_AWINDA_DONGLE = xsensdeviceapiPINVOKE.XS_DID_TYPE_AWINDA_DONGLE_get();
  public static readonly int XS_DID_TYPE_AWINDA_DONGLE_ANT = xsensdeviceapiPINVOKE.XS_DID_TYPE_AWINDA_DONGLE_ANT_get();
  public static readonly int XS_DID_TYPE_AWINDA_OEM = xsensdeviceapiPINVOKE.XS_DID_TYPE_AWINDA_OEM_get();
  public static readonly int XS_DID_TYPE_SYNCSTATION = xsensdeviceapiPINVOKE.XS_DID_TYPE_SYNCSTATION_get();
  public static readonly int XS_DID_FULLTYPE_AWINDA2_STATION = xsensdeviceapiPINVOKE.XS_DID_FULLTYPE_AWINDA2_STATION_get();
  public static readonly int XS_DID_FULLTYPE_AWINDA2_DONGLE = xsensdeviceapiPINVOKE.XS_DID_FULLTYPE_AWINDA2_DONGLE_get();
  public static readonly int XS_DID_FULLTYPE_AWINDA2_OEM = xsensdeviceapiPINVOKE.XS_DID_FULLTYPE_AWINDA2_OEM_get();
  public static readonly int XS_DID_FULLTYPE_SYNCSTATION2 = xsensdeviceapiPINVOKE.XS_DID_FULLTYPE_SYNCSTATION2_get();
  public static readonly int XS_DID_TYPE_MTX2 = xsensdeviceapiPINVOKE.XS_DID_TYPE_MTX2_get();
  public static readonly int XS_DID_TYPE_MTW2 = xsensdeviceapiPINVOKE.XS_DID_TYPE_MTW2_get();
  public static readonly int XS_DID_MK4TYPE_MT_1_MPU = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_1_MPU_get();
  public static readonly int XS_DID_MK4TYPE_MT_2_MPU = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_2_MPU_get();
  public static readonly int XS_DID_MK4TYPE_MT_3_MPU = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_3_MPU_get();
  public static readonly int XS_DID_MK4TYPE_MT_7_MPU = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_7_MPU_get();
  public static readonly int XS_DID_MK4TYPE_MT_8_MPU = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_8_MPU_get();
  public static readonly int XS_DID_MK4TYPE_MT_310 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_310_get();
  public static readonly int XS_DID_MK4TYPE_MT_320 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_320_get();
  public static readonly int XS_DID_MK4TYPE_MT_330 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_330_get();
  public static readonly int XS_DID_MK4TYPE_MT_10 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_10_get();
  public static readonly int XS_DID_MK4TYPE_MT_20 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_20_get();
  public static readonly int XS_DID_MK4TYPE_MT_30 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_30_get();
  public static readonly int XS_DID_MK4TYPE_MT_100 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_100_get();
  public static readonly int XS_DID_MK4TYPE_MT_200 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_200_get();
  public static readonly int XS_DID_MK4TYPE_MT_300 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_300_get();
  public static readonly int XS_DID_MK4TYPE_MT_400 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_400_get();
  public static readonly int XS_DID_MK4TYPE_MT_500 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_500_get();
  public static readonly int XS_DID_MK4TYPE_MT_600 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_600_get();
  public static readonly int XS_DID_MK4TYPE_MT_700 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_700_get();
  public static readonly int XS_DID_MK4TYPE_MT_800 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_800_get();
  public static readonly int XS_DID_MK4TYPE_MT_900 = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_900_get();
  public static readonly int XS_DID_MK5TYPE_MT_10 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_10_get();
  public static readonly int XS_DID_MK5TYPE_MT_20 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_20_get();
  public static readonly int XS_DID_MK5TYPE_MT_30 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_30_get();
  public static readonly int XS_DID_MK5TYPE_MT_100 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_100_get();
  public static readonly int XS_DID_MK5TYPE_MT_200 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_200_get();
  public static readonly int XS_DID_MK5TYPE_MT_300 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_300_get();
  public static readonly int XS_DID_MK5TYPE_MT_400 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_400_get();
  public static readonly int XS_DID_MK5TYPE_MT_500 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_500_get();
  public static readonly int XS_DID_MK5TYPE_MT_600 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_600_get();
  public static readonly int XS_DID_MK5TYPE_MT_700 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_700_get();
  public static readonly int XS_DID_MK5TYPE_MT_800 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_800_get();
  public static readonly int XS_DID_MK5TYPE_MT_900 = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_MT_900_get();
  public static readonly int XS_DID_MASTER = xsensdeviceapiPINVOKE.XS_DID_MASTER_get();
  public static readonly int XS_DID_ABMCLOCKMASTER = xsensdeviceapiPINVOKE.XS_DID_ABMCLOCKMASTER_get();
  public static readonly int XS_DID_GLOVEMASTER = xsensdeviceapiPINVOKE.XS_DID_GLOVEMASTER_get();
  public static readonly int XS_DID_GLOVETYPE_UNKNOWN = xsensdeviceapiPINVOKE.XS_DID_GLOVETYPE_UNKNOWN_get();
  public static readonly int XS_DID_GLOVETYPE_LEFT = xsensdeviceapiPINVOKE.XS_DID_GLOVETYPE_LEFT_get();
  public static readonly int XS_DID_GLOVETYPE_RIGHT = xsensdeviceapiPINVOKE.XS_DID_GLOVETYPE_RIGHT_get();
  public static readonly int XS_DID_GLOVEMASTER_UNKNOWN = xsensdeviceapiPINVOKE.XS_DID_GLOVEMASTER_UNKNOWN_get();
  public static readonly int XS_DID_GLOVEMASTER_LEFT = xsensdeviceapiPINVOKE.XS_DID_GLOVEMASTER_LEFT_get();
  public static readonly int XS_DID_GLOVEMASTER_RIGHT = xsensdeviceapiPINVOKE.XS_DID_GLOVEMASTER_RIGHT_get();
  public static readonly int XS_DID_MK4TYPE_MT_710_RANGE_START = xsensdeviceapiPINVOKE.XS_DID_MK4TYPE_MT_710_RANGE_START_get();
  public static readonly int XS_DID_MK5TYPE_RANGE_START = xsensdeviceapiPINVOKE.XS_DID_MK5TYPE_RANGE_START_get();
  public static readonly ulong XS_DID64_BIT = xsensdeviceapiPINVOKE.XS_DID64_BIT_get();
  public static readonly int XS_MAX_FILENAME_LENGTH = xsensdeviceapiPINVOKE.XS_MAX_FILENAME_LENGTH_get();
  public static readonly int XS_MAX_FILTERPROFILES = xsensdeviceapiPINVOKE.XS_MAX_FILTERPROFILES_get();
  public static readonly int XS_LEN_FILTERPROFILELABEL_TERM = xsensdeviceapiPINVOKE.XS_LEN_FILTERPROFILELABEL_TERM_get();
  public static readonly int XS_LEN_FILTERPROFILEKIND_TERM = xsensdeviceapiPINVOKE.XS_LEN_FILTERPROFILEKIND_TERM_get();
  public static readonly int XS_MAX_FILTERPROFILES_IN_MT = xsensdeviceapiPINVOKE.XS_MAX_FILTERPROFILES_IN_MT_get();
  public static readonly int XS_MAX_OUTPUTCONFIGURATIONS = xsensdeviceapiPINVOKE.XS_MAX_OUTPUTCONFIGURATIONS_get();
  public static readonly int XS_RSSI_MAX = xsensdeviceapiPINVOKE.XS_RSSI_MAX_get();
  public static readonly int XS_RSSI_UNKNOWN = xsensdeviceapiPINVOKE.XS_RSSI_UNKNOWN_get();
  public static readonly int XSSOCKET_INFINITE_TIMEOUT = xsensdeviceapiPINVOKE.XSSOCKET_INFINITE_TIMEOUT_get();
  public static readonly int WINVER = xsensdeviceapiPINVOKE.WINVER_get();
  public static readonly int _WIN32_WINNT = xsensdeviceapiPINVOKE._WIN32_WINNT_get();
  public static readonly int _WIN32_WINDOWS = xsensdeviceapiPINVOKE._WIN32_WINDOWS_get();
  public static readonly int _WIN32_IE = xsensdeviceapiPINVOKE._WIN32_IE_get();
  public static readonly int XSENS_USE_POSIX_LOCKING = xsensdeviceapiPINVOKE.XSENS_USE_POSIX_LOCKING_get();
  public static readonly int XS_IND_PREAMBLE = xsensdeviceapiPINVOKE.XS_IND_PREAMBLE_get();
  public static readonly int XS_IND_BID = xsensdeviceapiPINVOKE.XS_IND_BID_get();
  public static readonly int XS_IND_MID = xsensdeviceapiPINVOKE.XS_IND_MID_get();
  public static readonly int XS_IND_LEN = xsensdeviceapiPINVOKE.XS_IND_LEN_get();
  public static readonly int XS_IND_DATA0 = xsensdeviceapiPINVOKE.XS_IND_DATA0_get();
  public static readonly int XS_IND_LENEXTH = xsensdeviceapiPINVOKE.XS_IND_LENEXTH_get();
  public static readonly int XS_IND_LENEXTL = xsensdeviceapiPINVOKE.XS_IND_LENEXTL_get();
  public static readonly int XS_IND_DATAEXT0 = xsensdeviceapiPINVOKE.XS_IND_DATAEXT0_get();
  public static readonly int XS_SELFTEST_OK = xsensdeviceapiPINVOKE.XS_SELFTEST_OK_get();
  public static readonly int XS_LEN_TRANSPORTMODE = xsensdeviceapiPINVOKE.XS_LEN_TRANSPORTMODE_get();
  public static readonly int XS_LEN_DEVICEID = xsensdeviceapiPINVOKE.XS_LEN_DEVICEID_get();
  public static readonly int XS_LEN_INITBUSRESULTS = xsensdeviceapiPINVOKE.XS_LEN_INITBUSRESULTS_get();
  public static readonly int XS_LEN_PERIOD = xsensdeviceapiPINVOKE.XS_LEN_PERIOD_get();
  public static readonly int XS_LEN_BUSPWR = xsensdeviceapiPINVOKE.XS_LEN_BUSPWR_get();
  public static readonly int XS_LEN_DATALENGTH = xsensdeviceapiPINVOKE.XS_LEN_DATALENGTH_get();
  public static readonly int XS_LEN_CONFIGURATION = xsensdeviceapiPINVOKE.XS_LEN_CONFIGURATION_get();
  public static readonly int XS_LEN_FIRMWAREREV = xsensdeviceapiPINVOKE.XS_LEN_FIRMWAREREV_get();
  public static readonly int XS_LEN_BTDISABLE = xsensdeviceapiPINVOKE.XS_LEN_BTDISABLE_get();
  public static readonly int XS_LEN_OPMODE = xsensdeviceapiPINVOKE.XS_LEN_OPMODE_get();
  public static readonly int XS_LEN_BAUDRATE = xsensdeviceapiPINVOKE.XS_LEN_BAUDRATE_get();
  public static readonly int XS_LEN_SYNCMODE = xsensdeviceapiPINVOKE.XS_LEN_SYNCMODE_get();
  public static readonly int XS_LEN_PRODUCTCODE = xsensdeviceapiPINVOKE.XS_LEN_PRODUCTCODE_get();
  public static readonly int XS_LEN_PROCESSINGFLAGS = xsensdeviceapiPINVOKE.XS_LEN_PROCESSINGFLAGS_get();
  public static readonly int XS_LEN_XMPWROFF = xsensdeviceapiPINVOKE.XS_LEN_XMPWROFF_get();
  public static readonly int XS_LEN_OUTPUTMODE = xsensdeviceapiPINVOKE.XS_LEN_OUTPUTMODE_get();
  public static readonly int XS_LEN_OUTPUTSETTINGS = xsensdeviceapiPINVOKE.XS_LEN_OUTPUTSETTINGS_get();
  public static readonly int XS_LEN_OUTPUTSKIPFACTOR = xsensdeviceapiPINVOKE.XS_LEN_OUTPUTSKIPFACTOR_get();
  public static readonly int XS_LEN_SYNCINMODE = xsensdeviceapiPINVOKE.XS_LEN_SYNCINMODE_get();
  public static readonly int XS_LEN_SYNCINSKIPFACTOR = xsensdeviceapiPINVOKE.XS_LEN_SYNCINSKIPFACTOR_get();
  public static readonly int XS_LEN_SYNCINOFFSET = xsensdeviceapiPINVOKE.XS_LEN_SYNCINOFFSET_get();
  public static readonly int XS_LEN_SYNCOUTMODE = xsensdeviceapiPINVOKE.XS_LEN_SYNCOUTMODE_get();
  public static readonly int XS_LEN_SYNCOUTSKIPFACTOR = xsensdeviceapiPINVOKE.XS_LEN_SYNCOUTSKIPFACTOR_get();
  public static readonly int XS_LEN_SYNCOUTOFFSET = xsensdeviceapiPINVOKE.XS_LEN_SYNCOUTOFFSET_get();
  public static readonly int XS_LEN_SYNCOUTPULSEWIDTH = xsensdeviceapiPINVOKE.XS_LEN_SYNCOUTPULSEWIDTH_get();
  public static readonly int XS_LEN_ERRORMODE = xsensdeviceapiPINVOKE.XS_LEN_ERRORMODE_get();
  public static readonly int XS_LEN_TRANSMITDELAY = xsensdeviceapiPINVOKE.XS_LEN_TRANSMITDELAY_get();
  public static readonly int XS_LEN_OBJECTALIGNMENT = xsensdeviceapiPINVOKE.XS_LEN_OBJECTALIGNMENT_get();
  public static readonly int XS_LEN_ALIGNMENTROTATION = xsensdeviceapiPINVOKE.XS_LEN_ALIGNMENTROTATION_get();
  public static readonly int XS_LEN_XMERRORMODE = xsensdeviceapiPINVOKE.XS_LEN_XMERRORMODE_get();
  public static readonly int XS_LEN_BUFFERSIZE = xsensdeviceapiPINVOKE.XS_LEN_BUFFERSIZE_get();
  public static readonly int XS_LEN_HEADING = xsensdeviceapiPINVOKE.XS_LEN_HEADING_get();
  public static readonly int XS_LEN_MAGNETICFIELD = xsensdeviceapiPINVOKE.XS_LEN_MAGNETICFIELD_get();
  public static readonly int XS_LEN_LOCATIONID = xsensdeviceapiPINVOKE.XS_LEN_LOCATIONID_get();
  public static readonly int XS_LEN_EXTOUTPUTMODE = xsensdeviceapiPINVOKE.XS_LEN_EXTOUTPUTMODE_get();
  public static readonly int XS_LEN_INITTRACKMODE = xsensdeviceapiPINVOKE.XS_LEN_INITTRACKMODE_get();
  public static readonly int XS_LEN_STOREFILTERSTATE = xsensdeviceapiPINVOKE.XS_LEN_STOREFILTERSTATE_get();
  public static readonly int XS_LEN_UTCTIME = xsensdeviceapiPINVOKE.XS_LEN_UTCTIME_get();
  public static readonly int XS_LEN_FILTERPROFILELABEL = xsensdeviceapiPINVOKE.XS_LEN_FILTERPROFILELABEL_get();
  public static readonly int XS_LEN_FILTERPROFILEFULL = xsensdeviceapiPINVOKE.XS_LEN_FILTERPROFILEFULL_get();
  public static readonly int XS_LEN_AVAILABLEFILTERPROFILES = xsensdeviceapiPINVOKE.XS_LEN_AVAILABLEFILTERPROFILES_get();
  public static readonly int XS_LEN_REQFILTERPROFILEACK = xsensdeviceapiPINVOKE.XS_LEN_REQFILTERPROFILEACK_get();
  public static readonly int XS_LEN_SETFILTERPROFILE = xsensdeviceapiPINVOKE.XS_LEN_SETFILTERPROFILE_get();
  public static readonly int XS_LEN_GRAVITYMAGNITUDE = xsensdeviceapiPINVOKE.XS_LEN_GRAVITYMAGNITUDE_get();
  public static readonly int XS_LEN_GPSLEVERARM = xsensdeviceapiPINVOKE.XS_LEN_GPSLEVERARM_get();
  public static readonly int XS_LEN_LATLONALT = xsensdeviceapiPINVOKE.XS_LEN_LATLONALT_get();
  public static readonly int XS_LEN_SETNOROTATION = xsensdeviceapiPINVOKE.XS_LEN_SETNOROTATION_get();
  public static readonly int XS_LEN_FILTERSETTINGS = xsensdeviceapiPINVOKE.XS_LEN_FILTERSETTINGS_get();
  public static readonly int XS_LEN_AMD = xsensdeviceapiPINVOKE.XS_LEN_AMD_get();
  public static readonly int XS_LEN_RESETORIENTATION = xsensdeviceapiPINVOKE.XS_LEN_RESETORIENTATION_get();
  public static readonly int XS_LEN_GPSSTATUS = xsensdeviceapiPINVOKE.XS_LEN_GPSSTATUS_get();
  public static readonly int XS_LEN_CLIENTUSAGE = xsensdeviceapiPINVOKE.XS_LEN_CLIENTUSAGE_get();
  public static readonly int XS_LEN_CLIENTPRIORITY = xsensdeviceapiPINVOKE.XS_LEN_CLIENTPRIORITY_get();
  public static readonly int XS_LEN_WIRELESSCONFIG = xsensdeviceapiPINVOKE.XS_LEN_WIRELESSCONFIG_get();
  public static readonly int XS_LEN_INFOREQUEST = xsensdeviceapiPINVOKE.XS_LEN_INFOREQUEST_get();
  public static readonly int XS_LEN_SETOUTPUTTRIGGER = xsensdeviceapiPINVOKE.XS_LEN_SETOUTPUTTRIGGER_get();
  public static readonly int XS_LEN_SETINPUTTRIGGER = xsensdeviceapiPINVOKE.XS_LEN_SETINPUTTRIGGER_get();
  public static readonly int XS_LEN_RAWDATA = xsensdeviceapiPINVOKE.XS_LEN_RAWDATA_get();
  public static readonly int XS_LEN_CALIBDATA = xsensdeviceapiPINVOKE.XS_LEN_CALIBDATA_get();
  public static readonly int XS_LEN_CALIB_ACCDATA = xsensdeviceapiPINVOKE.XS_LEN_CALIB_ACCDATA_get();
  public static readonly int XS_LEN_CALIB_GYRDATA = xsensdeviceapiPINVOKE.XS_LEN_CALIB_GYRDATA_get();
  public static readonly int XS_LEN_CALIB_MAGDATA = xsensdeviceapiPINVOKE.XS_LEN_CALIB_MAGDATA_get();
  public static readonly int XS_LEN_ORIENT_QUATDATA = xsensdeviceapiPINVOKE.XS_LEN_ORIENT_QUATDATA_get();
  public static readonly int XS_LEN_ORIENT_EULERDATA = xsensdeviceapiPINVOKE.XS_LEN_ORIENT_EULERDATA_get();
  public static readonly int XS_LEN_ORIENT_MATRIXSTA = xsensdeviceapiPINVOKE.XS_LEN_ORIENT_MATRIXSTA_get();
  public static readonly int XS_LEN_SAMPLECNT = xsensdeviceapiPINVOKE.XS_LEN_SAMPLECNT_get();
  public static readonly int XS_LEN_TEMPDATA = xsensdeviceapiPINVOKE.XS_LEN_TEMPDATA_get();
  public static readonly int XS_LEN_CALIBDATA_FLT = xsensdeviceapiPINVOKE.XS_LEN_CALIBDATA_FLT_get();
  public static readonly int XS_LEN_TEMPDATA_FLT = xsensdeviceapiPINVOKE.XS_LEN_TEMPDATA_FLT_get();
  public static readonly int XS_LEN_ORIENT_QUATDATA_FLT = xsensdeviceapiPINVOKE.XS_LEN_ORIENT_QUATDATA_FLT_get();
  public static readonly int XS_LEN_ORIENT_EULERDATA_FLT = xsensdeviceapiPINVOKE.XS_LEN_ORIENT_EULERDATA_FLT_get();
  public static readonly int XS_LEN_ORIENT_MATRIXSTA_FLT = xsensdeviceapiPINVOKE.XS_LEN_ORIENT_MATRIXSTA_FLT_get();
  public static readonly int XS_INVALIDSETTINGVALUE = xsensdeviceapiPINVOKE.XS_INVALIDSETTINGVALUE_get();
  public static readonly int XS_CONF_MASTERDID = xsensdeviceapiPINVOKE.XS_CONF_MASTERDID_get();
  public static readonly int XS_CONF_PERIOD = xsensdeviceapiPINVOKE.XS_CONF_PERIOD_get();
  public static readonly int XS_CONF_OUTPUTSKIPFACTOR = xsensdeviceapiPINVOKE.XS_CONF_OUTPUTSKIPFACTOR_get();
  public static readonly int XS_CONF_SYNCIN_MODE = xsensdeviceapiPINVOKE.XS_CONF_SYNCIN_MODE_get();
  public static readonly int XS_CONF_SYNCIN_SKIPFACTOR = xsensdeviceapiPINVOKE.XS_CONF_SYNCIN_SKIPFACTOR_get();
  public static readonly int XS_CONF_SYNCIN_OFFSET = xsensdeviceapiPINVOKE.XS_CONF_SYNCIN_OFFSET_get();
  public static readonly int XS_CONF_DATE = xsensdeviceapiPINVOKE.XS_CONF_DATE_get();
  public static readonly int XS_CONF_TIME = xsensdeviceapiPINVOKE.XS_CONF_TIME_get();
  public static readonly int XS_CONF_NUMDEVICES = xsensdeviceapiPINVOKE.XS_CONF_NUMDEVICES_get();
  public static readonly int XS_CONF_DID = xsensdeviceapiPINVOKE.XS_CONF_DID_get();
  public static readonly int XS_CONF_DATALENGTH = xsensdeviceapiPINVOKE.XS_CONF_DATALENGTH_get();
  public static readonly int XS_CONF_OUTPUTMODE = xsensdeviceapiPINVOKE.XS_CONF_OUTPUTMODE_get();
  public static readonly int XS_CONF_OUTPUTSETTINGS = xsensdeviceapiPINVOKE.XS_CONF_OUTPUTSETTINGS_get();
  public static readonly int XS_CONF_BLOCKLEN = xsensdeviceapiPINVOKE.XS_CONF_BLOCKLEN_get();
  public static readonly int XS_CONF_MASTERDIDLEN = xsensdeviceapiPINVOKE.XS_CONF_MASTERDIDLEN_get();
  public static readonly int XS_CONF_PERIODLEN = xsensdeviceapiPINVOKE.XS_CONF_PERIODLEN_get();
  public static readonly int XS_CONF_OUTPUTSKIPFACTORLEN = xsensdeviceapiPINVOKE.XS_CONF_OUTPUTSKIPFACTORLEN_get();
  public static readonly int XS_CONF_SYNCIN_MODELEN = xsensdeviceapiPINVOKE.XS_CONF_SYNCIN_MODELEN_get();
  public static readonly int XS_CONF_SYNCIN_SKIPFACTORLEN = xsensdeviceapiPINVOKE.XS_CONF_SYNCIN_SKIPFACTORLEN_get();
  public static readonly int XS_CONF_SYNCIN_OFFSETLEN = xsensdeviceapiPINVOKE.XS_CONF_SYNCIN_OFFSETLEN_get();
  public static readonly int XS_CONF_DATELEN = xsensdeviceapiPINVOKE.XS_CONF_DATELEN_get();
  public static readonly int XS_CONF_TIMELEN = xsensdeviceapiPINVOKE.XS_CONF_TIMELEN_get();
  public static readonly int XS_CONF_RESERVED_CLIENTLEN = xsensdeviceapiPINVOKE.XS_CONF_RESERVED_CLIENTLEN_get();
  public static readonly int XS_CONF_RESERVED_HOSTLEN = xsensdeviceapiPINVOKE.XS_CONF_RESERVED_HOSTLEN_get();
  public static readonly int XS_CONF_NUMDEVICESLEN = xsensdeviceapiPINVOKE.XS_CONF_NUMDEVICESLEN_get();
  public static readonly int XS_CONF_DIDLEN = xsensdeviceapiPINVOKE.XS_CONF_DIDLEN_get();
  public static readonly int XS_CONF_DATALENGTHLEN = xsensdeviceapiPINVOKE.XS_CONF_DATALENGTHLEN_get();
  public static readonly int XS_CONF_OUTPUTMODELEN = xsensdeviceapiPINVOKE.XS_CONF_OUTPUTMODELEN_get();
  public static readonly int XS_CONF_OUTPUTSETTINGSLEN = xsensdeviceapiPINVOKE.XS_CONF_OUTPUTSETTINGSLEN_get();
  public static readonly double XS_SYNC_CLOCKFREQMHZ = xsensdeviceapiPINVOKE.XS_SYNC_CLOCKFREQMHZ_get();
  public static readonly double XS_SYNC_CLOCK_NS_TO_TICKS = xsensdeviceapiPINVOKE.XS_SYNC_CLOCK_NS_TO_TICKS_get();
  public static readonly double XS_SYNC_CLOCK_TICKS_TO_NS = xsensdeviceapiPINVOKE.XS_SYNC_CLOCK_TICKS_TO_NS_get();
  public static readonly double XS_SYNC_CLOCK_US_TO_TICKS = xsensdeviceapiPINVOKE.XS_SYNC_CLOCK_US_TO_TICKS_get();
  public static readonly double XS_SYNC_CLOCK_TICKS_TO_US = xsensdeviceapiPINVOKE.XS_SYNC_CLOCK_TICKS_TO_US_get();
  public static readonly int XS_PARAM_SYNCIN_MODE = xsensdeviceapiPINVOKE.XS_PARAM_SYNCIN_MODE_get();
  public static readonly int XS_PARAM_SYNCIN_SKIPFACTOR = xsensdeviceapiPINVOKE.XS_PARAM_SYNCIN_SKIPFACTOR_get();
  public static readonly int XS_PARAM_SYNCIN_OFFSET = xsensdeviceapiPINVOKE.XS_PARAM_SYNCIN_OFFSET_get();
  public static readonly int XS_SYNCIN_DISABLED = xsensdeviceapiPINVOKE.XS_SYNCIN_DISABLED_get();
  public static readonly int XS_SYNCIN_EDGE_RISING = xsensdeviceapiPINVOKE.XS_SYNCIN_EDGE_RISING_get();
  public static readonly int XS_SYNCIN_EDGE_FALLING = xsensdeviceapiPINVOKE.XS_SYNCIN_EDGE_FALLING_get();
  public static readonly int XS_SYNCIN_EDGE_BOTH = xsensdeviceapiPINVOKE.XS_SYNCIN_EDGE_BOTH_get();
  public static readonly int XS_SYNCIN_EDGE_MASK = xsensdeviceapiPINVOKE.XS_SYNCIN_EDGE_MASK_get();
  public static readonly int XS_SYNCIN_TYPE_DOSAMPLING = xsensdeviceapiPINVOKE.XS_SYNCIN_TYPE_DOSAMPLING_get();
  public static readonly int XS_SYNCIN_TYPE_SENDLASTDATA = xsensdeviceapiPINVOKE.XS_SYNCIN_TYPE_SENDLASTDATA_get();
  public static readonly int XS_SYNCIN_TYPE_CLOCK = xsensdeviceapiPINVOKE.XS_SYNCIN_TYPE_CLOCK_get();
  public static readonly int XS_SYNCIN_TYPE_MASK = xsensdeviceapiPINVOKE.XS_SYNCIN_TYPE_MASK_get();
  public static readonly int XS_PARAM_SYNCOUT_MODE = xsensdeviceapiPINVOKE.XS_PARAM_SYNCOUT_MODE_get();
  public static readonly int XS_PARAM_SYNCOUT_SKIPFACTOR = xsensdeviceapiPINVOKE.XS_PARAM_SYNCOUT_SKIPFACTOR_get();
  public static readonly int XS_PARAM_SYNCOUT_OFFSET = xsensdeviceapiPINVOKE.XS_PARAM_SYNCOUT_OFFSET_get();
  public static readonly int XS_PARAM_SYNCOUT_PULSEWIDTH = xsensdeviceapiPINVOKE.XS_PARAM_SYNCOUT_PULSEWIDTH_get();
  public static readonly int XS_SYNCOUT_DISABLED = xsensdeviceapiPINVOKE.XS_SYNCOUT_DISABLED_get();
  public static readonly int XS_SYNCOUT_TYPE_TOGGLE = xsensdeviceapiPINVOKE.XS_SYNCOUT_TYPE_TOGGLE_get();
  public static readonly int XS_SYNCOUT_TYPE_PULSE = xsensdeviceapiPINVOKE.XS_SYNCOUT_TYPE_PULSE_get();
  public static readonly int XS_SYNCOUT_POL_NEG = xsensdeviceapiPINVOKE.XS_SYNCOUT_POL_NEG_get();
  public static readonly int XS_SYNCOUT_POL_POS = xsensdeviceapiPINVOKE.XS_SYNCOUT_POL_POS_get();
  public static readonly int XS_SYNCOUT_TYPE_MASK = xsensdeviceapiPINVOKE.XS_SYNCOUT_TYPE_MASK_get();
  public static readonly int XS_SYNCOUT_POL_MASK = xsensdeviceapiPINVOKE.XS_SYNCOUT_POL_MASK_get();
  public static readonly int XS_INITTRACKMODE_DISABLED = xsensdeviceapiPINVOKE.XS_INITTRACKMODE_DISABLED_get();
  public static readonly int XS_INITTRACKMODE_ENABLED = xsensdeviceapiPINVOKE.XS_INITTRACKMODE_ENABLED_get();
  public static readonly int XS_PARAM_FILTER_GAIN = xsensdeviceapiPINVOKE.XS_PARAM_FILTER_GAIN_get();
  public static readonly int XS_PARAM_FILTER_RHO = xsensdeviceapiPINVOKE.XS_PARAM_FILTER_RHO_get();
  public static readonly int XS_DONOTSTORE = xsensdeviceapiPINVOKE.XS_DONOTSTORE_get();
  public static readonly int XS_STORE = xsensdeviceapiPINVOKE.XS_STORE_get();
  public static readonly int XS_AMDSETTING_DISABLED = xsensdeviceapiPINVOKE.XS_AMDSETTING_DISABLED_get();
  public static readonly int XS_AMDSETTING_ENABLED = xsensdeviceapiPINVOKE.XS_AMDSETTING_ENABLED_get();
  public static readonly int XS_PARAM_ROTSENSOR = xsensdeviceapiPINVOKE.XS_PARAM_ROTSENSOR_get();
  public static readonly int XS_PARAM_ROTLOCAL = xsensdeviceapiPINVOKE.XS_PARAM_ROTLOCAL_get();
  public static readonly int XS_SENDRAWSTRING_INIT = xsensdeviceapiPINVOKE.XS_SENDRAWSTRING_INIT_get();
  public static readonly int XS_SENDRAWSTRING_DEFAULT = xsensdeviceapiPINVOKE.XS_SENDRAWSTRING_DEFAULT_get();
  public static readonly int XS_SENDRAWSTRING_SEND = xsensdeviceapiPINVOKE.XS_SENDRAWSTRING_SEND_get();
  public static readonly int XS_TO_DEFAULT = xsensdeviceapiPINVOKE.XS_TO_DEFAULT_get();
  public static readonly int XS_TO_INIT = xsensdeviceapiPINVOKE.XS_TO_INIT_get();
  public static readonly int XS_TO_RETRY = xsensdeviceapiPINVOKE.XS_TO_RETRY_get();
  public static readonly int XS_PERIOD_10HZ = xsensdeviceapiPINVOKE.XS_PERIOD_10HZ_get();
  public static readonly int XS_PERIOD_12HZ = xsensdeviceapiPINVOKE.XS_PERIOD_12HZ_get();
  public static readonly int XS_PERIOD_15HZ = xsensdeviceapiPINVOKE.XS_PERIOD_15HZ_get();
  public static readonly int XS_PERIOD_16HZ = xsensdeviceapiPINVOKE.XS_PERIOD_16HZ_get();
  public static readonly int XS_PERIOD_18HZ = xsensdeviceapiPINVOKE.XS_PERIOD_18HZ_get();
  public static readonly int XS_PERIOD_20HZ = xsensdeviceapiPINVOKE.XS_PERIOD_20HZ_get();
  public static readonly int XS_PERIOD_24HZ = xsensdeviceapiPINVOKE.XS_PERIOD_24HZ_get();
  public static readonly int XS_PERIOD_25HZ = xsensdeviceapiPINVOKE.XS_PERIOD_25HZ_get();
  public static readonly int XS_PERIOD_30HZ = xsensdeviceapiPINVOKE.XS_PERIOD_30HZ_get();
  public static readonly int XS_PERIOD_32HZ = xsensdeviceapiPINVOKE.XS_PERIOD_32HZ_get();
  public static readonly int XS_PERIOD_36HZ = xsensdeviceapiPINVOKE.XS_PERIOD_36HZ_get();
  public static readonly int XS_PERIOD_40HZ = xsensdeviceapiPINVOKE.XS_PERIOD_40HZ_get();
  public static readonly int XS_PERIOD_45HZ = xsensdeviceapiPINVOKE.XS_PERIOD_45HZ_get();
  public static readonly int XS_PERIOD_48HZ = xsensdeviceapiPINVOKE.XS_PERIOD_48HZ_get();
  public static readonly int XS_PERIOD_50HZ = xsensdeviceapiPINVOKE.XS_PERIOD_50HZ_get();
  public static readonly int XS_PERIOD_60HZ = xsensdeviceapiPINVOKE.XS_PERIOD_60HZ_get();
  public static readonly int XS_PERIOD_64HZ = xsensdeviceapiPINVOKE.XS_PERIOD_64HZ_get();
  public static readonly int XS_PERIOD_72HZ = xsensdeviceapiPINVOKE.XS_PERIOD_72HZ_get();
  public static readonly int XS_PERIOD_75HZ = xsensdeviceapiPINVOKE.XS_PERIOD_75HZ_get();
  public static readonly int XS_PERIOD_80HZ = xsensdeviceapiPINVOKE.XS_PERIOD_80HZ_get();
  public static readonly int XS_PERIOD_90HZ = xsensdeviceapiPINVOKE.XS_PERIOD_90HZ_get();
  public static readonly int XS_PERIOD_96HZ = xsensdeviceapiPINVOKE.XS_PERIOD_96HZ_get();
  public static readonly int XS_PERIOD_100HZ = xsensdeviceapiPINVOKE.XS_PERIOD_100HZ_get();
  public static readonly int XS_PERIOD_120HZ = xsensdeviceapiPINVOKE.XS_PERIOD_120HZ_get();
  public static readonly int XS_PERIOD_128HZ = xsensdeviceapiPINVOKE.XS_PERIOD_128HZ_get();
  public static readonly int XS_PERIOD_144HZ = xsensdeviceapiPINVOKE.XS_PERIOD_144HZ_get();
  public static readonly int XS_PERIOD_150HZ = xsensdeviceapiPINVOKE.XS_PERIOD_150HZ_get();
  public static readonly int XS_PERIOD_160HZ = xsensdeviceapiPINVOKE.XS_PERIOD_160HZ_get();
  public static readonly int XS_PERIOD_180HZ = xsensdeviceapiPINVOKE.XS_PERIOD_180HZ_get();
  public static readonly int XS_PERIOD_192HZ = xsensdeviceapiPINVOKE.XS_PERIOD_192HZ_get();
  public static readonly int XS_PERIOD_200HZ = xsensdeviceapiPINVOKE.XS_PERIOD_200HZ_get();
  public static readonly int XS_PERIOD_225HZ = xsensdeviceapiPINVOKE.XS_PERIOD_225HZ_get();
  public static readonly int XS_PERIOD_240HZ = xsensdeviceapiPINVOKE.XS_PERIOD_240HZ_get();
  public static readonly int XS_PERIOD_256HZ = xsensdeviceapiPINVOKE.XS_PERIOD_256HZ_get();
  public static readonly int XS_PERIOD_288HZ = xsensdeviceapiPINVOKE.XS_PERIOD_288HZ_get();
  public static readonly int XS_PERIOD_300HZ = xsensdeviceapiPINVOKE.XS_PERIOD_300HZ_get();
  public static readonly int XS_PERIOD_320HZ = xsensdeviceapiPINVOKE.XS_PERIOD_320HZ_get();
  public static readonly int XS_PERIOD_360HZ = xsensdeviceapiPINVOKE.XS_PERIOD_360HZ_get();
  public static readonly int XS_PERIOD_384HZ = xsensdeviceapiPINVOKE.XS_PERIOD_384HZ_get();
  public static readonly int XS_PERIOD_400HZ = xsensdeviceapiPINVOKE.XS_PERIOD_400HZ_get();
  public static readonly int XS_PERIOD_450HZ = xsensdeviceapiPINVOKE.XS_PERIOD_450HZ_get();
  public static readonly int XS_PERIOD_480HZ = xsensdeviceapiPINVOKE.XS_PERIOD_480HZ_get();
  public static readonly int XS_PERIOD_512HZ = xsensdeviceapiPINVOKE.XS_PERIOD_512HZ_get();
  public static readonly int XS_PERIOD_576HZ = xsensdeviceapiPINVOKE.XS_PERIOD_576HZ_get();
  public static readonly int XS_PERIOD_600HZ = xsensdeviceapiPINVOKE.XS_PERIOD_600HZ_get();
  public static readonly int XS_PERIOD_640HZ = xsensdeviceapiPINVOKE.XS_PERIOD_640HZ_get();
  public static readonly int XS_PERIOD_720HZ = xsensdeviceapiPINVOKE.XS_PERIOD_720HZ_get();
  public static readonly int XS_PERIOD_768HZ = xsensdeviceapiPINVOKE.XS_PERIOD_768HZ_get();
  public static readonly int XS_PERIOD_800HZ = xsensdeviceapiPINVOKE.XS_PERIOD_800HZ_get();
  public static readonly int XS_PERIOD_900HZ = xsensdeviceapiPINVOKE.XS_PERIOD_900HZ_get();
  public static readonly int XS_PERIOD_960HZ = xsensdeviceapiPINVOKE.XS_PERIOD_960HZ_get();
  public static readonly int XS_PERIOD_1152HZ = xsensdeviceapiPINVOKE.XS_PERIOD_1152HZ_get();
  public static readonly int XS_PERIOD_1200HZ = xsensdeviceapiPINVOKE.XS_PERIOD_1200HZ_get();
  public static readonly int XS_PERIOD_1280HZ = xsensdeviceapiPINVOKE.XS_PERIOD_1280HZ_get();
  public static readonly int XS_PERIOD_1440HZ = xsensdeviceapiPINVOKE.XS_PERIOD_1440HZ_get();
  public static readonly int XS_PERIOD_1536HZ = xsensdeviceapiPINVOKE.XS_PERIOD_1536HZ_get();
  public static readonly int XS_PERIOD_1600HZ = xsensdeviceapiPINVOKE.XS_PERIOD_1600HZ_get();
  public static readonly int XS_PERIOD_1800HZ = xsensdeviceapiPINVOKE.XS_PERIOD_1800HZ_get();
  public static readonly int XS_PERIOD_1920HZ = xsensdeviceapiPINVOKE.XS_PERIOD_1920HZ_get();
  public static readonly int XS_PERIOD_2304HZ = xsensdeviceapiPINVOKE.XS_PERIOD_2304HZ_get();
  public static readonly int XS_PERIOD_2400HZ = xsensdeviceapiPINVOKE.XS_PERIOD_2400HZ_get();
  public static readonly int XS_PERIOD_2560HZ = xsensdeviceapiPINVOKE.XS_PERIOD_2560HZ_get();
  public static readonly int XS_PERIOD_2880HZ = xsensdeviceapiPINVOKE.XS_PERIOD_2880HZ_get();
  public static readonly int XS_PERIOD_3200HZ = xsensdeviceapiPINVOKE.XS_PERIOD_3200HZ_get();
  public static readonly int XS_PERIOD_3600HZ = xsensdeviceapiPINVOKE.XS_PERIOD_3600HZ_get();
  public static readonly int XS_PERIOD_3840HZ = xsensdeviceapiPINVOKE.XS_PERIOD_3840HZ_get();
  public static readonly int XS_PERIOD_4608HZ = xsensdeviceapiPINVOKE.XS_PERIOD_4608HZ_get();
  public static readonly int XS_PERIOD_4800HZ = xsensdeviceapiPINVOKE.XS_PERIOD_4800HZ_get();
  public static readonly int XS_PERIOD_5760HZ = xsensdeviceapiPINVOKE.XS_PERIOD_5760HZ_get();
  public static readonly int XS_PERIOD_6400HZ = xsensdeviceapiPINVOKE.XS_PERIOD_6400HZ_get();
  public static readonly int XS_PERIOD_7200HZ = xsensdeviceapiPINVOKE.XS_PERIOD_7200HZ_get();
  public static readonly int XS_PERIOD_7680HZ = xsensdeviceapiPINVOKE.XS_PERIOD_7680HZ_get();
  public static readonly int XS_PERIOD_9600HZ = xsensdeviceapiPINVOKE.XS_PERIOD_9600HZ_get();
  public static readonly int XS_PERIOD_11520HZ = xsensdeviceapiPINVOKE.XS_PERIOD_11520HZ_get();
  public static readonly int XS_AUTO_SAVE_FRAMES = xsensdeviceapiPINVOKE.XS_AUTO_SAVE_FRAMES_get();
  public static readonly int XS_FILE_LAST_FRAME = xsensdeviceapiPINVOKE.XS_FILE_LAST_FRAME_get();
  public static readonly int XEMTS_SIZE = xsensdeviceapiPINVOKE.XEMTS_SIZE_get();
  public static readonly int XS_MAX_VPORTNAME_LEN = xsensdeviceapiPINVOKE.XS_MAX_VPORTNAME_LEN_get();
}

}
