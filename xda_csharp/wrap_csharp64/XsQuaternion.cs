
//  ==> COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE <==
//  WARNING: COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO AN END USER LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  
//  THIS SOFTWARE CAN CONTAIN OPEN SOURCE COMPONENTS WHICH CAN BE SUBJECT TO 
//  THE FOLLOWING GENERAL PUBLIC LICENSES:
//  ==> Qt GNU LGPL version 3: http://doc.qt.io/qt-5/lgpl.html <==
//  ==> LAPACK BSD License:  http://www.netlib.org/lapack/LICENSE.txt <==
//  ==> StackWalker 3-Clause BSD License: https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE <==
//  ==> Icon Creative Commons 3.0: https://creativecommons.org/licenses/by/3.0/legalcode <==
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsQuaternion : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsQuaternion(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsQuaternion obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsQuaternion() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsQuaternion(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public XsQuaternion(double w_, double x_, double y_, double z_) : this(xsensdeviceapiPINVOKE.new_XsQuaternion__SWIG_0(w_, x_, y_, z_), true) {
  }

  public XsQuaternion(double w_, double x_, double y_) : this(xsensdeviceapiPINVOKE.new_XsQuaternion__SWIG_1(w_, x_, y_), true) {
  }

  public XsQuaternion(double w_, double x_) : this(xsensdeviceapiPINVOKE.new_XsQuaternion__SWIG_2(w_, x_), true) {
  }

  public XsQuaternion(double w_) : this(xsensdeviceapiPINVOKE.new_XsQuaternion__SWIG_3(w_), true) {
  }

  public XsQuaternion() : this(xsensdeviceapiPINVOKE.new_XsQuaternion__SWIG_4(), true) {
  }

  public XsQuaternion(double w_, double x_, double y_, double z_, bool normalize_) : this(xsensdeviceapiPINVOKE.new_XsQuaternion__SWIG_5(w_, x_, y_, z_, normalize_), true) {
  }

  public XsQuaternion(XsQuaternion other) : this(xsensdeviceapiPINVOKE.new_XsQuaternion__SWIG_6(XsQuaternion.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsQuaternion(XsEuler euler) : this(xsensdeviceapiPINVOKE.new_XsQuaternion__SWIG_7(XsEuler.getCPtr(euler)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsQuaternion(XsMatrix ori) : this(xsensdeviceapiPINVOKE.new_XsQuaternion__SWIG_8(XsMatrix.getCPtr(ori)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void assign(double w_, double x_, double y_, double z_) {
    xsensdeviceapiPINVOKE.XsQuaternion_assign__SWIG_0(swigCPtr, w_, x_, y_, z_);
  }

  public void assign(SWIGTYPE_p_double values) {
    xsensdeviceapiPINVOKE.XsQuaternion_assign__SWIG_1(swigCPtr, SWIGTYPE_p_double.getCPtr(values));
  }

  public SWIGTYPE_p_double data() {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsQuaternion_data(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public XsQuaternion inverse() {
    XsQuaternion ret = new XsQuaternion(xsensdeviceapiPINVOKE.XsQuaternion_inverse(swigCPtr), true);
    return ret;
  }

  public XsQuaternion conjugate() {
    XsQuaternion ret = new XsQuaternion(xsensdeviceapiPINVOKE.XsQuaternion_conjugate(swigCPtr), true);
    return ret;
  }

  public XsQuaternion normalized() {
    XsQuaternion ret = new XsQuaternion(xsensdeviceapiPINVOKE.XsQuaternion_normalized(swigCPtr), true);
    return ret;
  }

  public double normalize() {
    double ret = xsensdeviceapiPINVOKE.XsQuaternion_normalize(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsQuaternion_empty(swigCPtr);
    return ret;
  }

  public XsQuaternion fromEulerAngles(XsEuler src) {
    XsQuaternion ret = new XsQuaternion(xsensdeviceapiPINVOKE.XsQuaternion_fromEulerAngles(swigCPtr, XsEuler.getCPtr(src)), false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsQuaternion fromRotationMatrix(XsMatrix ori) {
    XsQuaternion ret = new XsQuaternion(xsensdeviceapiPINVOKE.XsQuaternion_fromRotationMatrix(swigCPtr, XsMatrix.getCPtr(ori)), false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static XsQuaternion identity() {
    XsQuaternion ret = new XsQuaternion(xsensdeviceapiPINVOKE.XsQuaternion_identity(), false);
    return ret;
  }

  public void multiply(XsQuaternion a, XsQuaternion b) {
    xsensdeviceapiPINVOKE.XsQuaternion_multiply(swigCPtr, XsQuaternion.getCPtr(a), XsQuaternion.getCPtr(b));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public double w() {
    double ret = xsensdeviceapiPINVOKE.XsQuaternion_w__SWIG_0(swigCPtr);
    return ret;
  }

  public double x() {
    double ret = xsensdeviceapiPINVOKE.XsQuaternion_x__SWIG_0(swigCPtr);
    return ret;
  }

  public double y() {
    double ret = xsensdeviceapiPINVOKE.XsQuaternion_y__SWIG_0(swigCPtr);
    return ret;
  }

  public double z() {
    double ret = xsensdeviceapiPINVOKE.XsQuaternion_z__SWIG_0(swigCPtr);
    return ret;
  }

  public void swap(XsQuaternion other) {
    xsensdeviceapiPINVOKE.XsQuaternion_swap(swigCPtr, XsQuaternion.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isEqual(XsQuaternion other, double tolerance) {
    bool ret = xsensdeviceapiPINVOKE.XsQuaternion_isEqual(swigCPtr, XsQuaternion.getCPtr(other), tolerance);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double dotProduct(XsQuaternion other) {
    double ret = xsensdeviceapiPINVOKE.XsQuaternion_dotProduct(swigCPtr, XsQuaternion.getCPtr(other));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
