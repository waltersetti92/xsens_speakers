
//  ==> COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE <==
//  WARNING: COPYRIGHT (C) 2021 XSENS TECHNOLOGIES OR SUBSIDIARIES WORLDWIDE. ALL RIGHTS RESERVED.
//  THIS FILE AND THE SOURCE CODE IT CONTAINS (AND/OR THE BINARY CODE FILES FOUND IN THE SAME
//  FOLDER THAT CONTAINS THIS FILE) AND ALL RELATED SOFTWARE (COLLECTIVELY, "CODE") ARE SUBJECT
//  TO AN END USER LICENSE AGREEMENT ("AGREEMENT") BETWEEN XSENS AS LICENSOR AND THE AUTHORIZED
//  LICENSEE UNDER THE AGREEMENT. THE CODE MUST BE USED SOLELY WITH XSENS PRODUCTS INCORPORATED
//  INTO LICENSEE PRODUCTS IN ACCORDANCE WITH THE AGREEMENT. ANY USE, MODIFICATION, COPYING OR
//  DISTRIBUTION OF THE CODE IS STRICTLY PROHIBITED UNLESS EXPRESSLY AUTHORIZED BY THE AGREEMENT.
//  IF YOU ARE NOT AN AUTHORIZED USER OF THE CODE IN ACCORDANCE WITH THE AGREEMENT, YOU MUST STOP
//  USING OR VIEWING THE CODE NOW, REMOVE ANY COPIES OF THE CODE FROM YOUR COMPUTER AND NOTIFY
//  XSENS IMMEDIATELY BY EMAIL TO INFO@XSENS.COM. ANY COPIES OR DERIVATIVES OF THE CODE (IN WHOLE
//  OR IN PART) IN SOURCE CODE FORM THAT ARE PERMITTED BY THE AGREEMENT MUST RETAIN THE ABOVE
//  COPYRIGHT NOTICE AND THIS PARAGRAPH IN ITS ENTIRETY, AS REQUIRED BY THE AGREEMENT.
//  
//  THIS SOFTWARE CAN CONTAIN OPEN SOURCE COMPONENTS WHICH CAN BE SUBJECT TO 
//  THE FOLLOWING GENERAL PUBLIC LICENSES:
//  ==> Qt GNU LGPL version 3: http://doc.qt.io/qt-5/lgpl.html <==
//  ==> LAPACK BSD License:  http://www.netlib.org/lapack/LICENSE.txt <==
//  ==> StackWalker 3-Clause BSD License: https://github.com/JochenKalmbach/StackWalker/blob/master/LICENSE <==
//  ==> Icon Creative Commons 3.0: https://creativecommons.org/licenses/by/3.0/legalcode <==
//  

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XDA {

public class XsMatrix : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsMatrix(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XsMatrix obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsMatrix() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsMatrix(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public XsMatrix(uint rows, uint cols, uint strde, SWIGTYPE_p_double dat) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_0(rows, cols, strde, SWIGTYPE_p_double.getCPtr(dat)), true) {
  }

  public XsMatrix(uint rows, uint cols, uint strde) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_1(rows, cols, strde), true) {
  }

  public XsMatrix(uint rows, uint cols) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_2(rows, cols), true) {
  }

  public XsMatrix(uint rows) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_3(rows), true) {
  }

  public XsMatrix() : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_4(), true) {
  }

  public XsMatrix(XsMatrix other) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_5(XsMatrix.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsMatrix(SWIGTYPE_p_double ref_, uint rows, uint cols, uint stride, XsDataFlags flags) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_6(SWIGTYPE_p_double.getCPtr(ref_), rows, cols, stride, (int)flags), true) {
  }

  public XsMatrix(XsMatrix other, SWIGTYPE_p_double ref_, uint rows, uint cols, uint stride, XsDataFlags flags) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_7(XsMatrix.getCPtr(other), SWIGTYPE_p_double.getCPtr(ref_), rows, cols, stride, (int)flags), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsMatrix(XsQuaternion quat) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_8(XsQuaternion.getCPtr(quat)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSize(uint rows, uint cols, uint stride) {
    xsensdeviceapiPINVOKE.XsMatrix_setSize__SWIG_0(swigCPtr, rows, cols, stride);
  }

  public void setSize(uint rows, uint cols) {
    xsensdeviceapiPINVOKE.XsMatrix_setSize__SWIG_1(swigCPtr, rows, cols);
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsMatrix_empty(swigCPtr);
    return ret;
  }

  public void setZero() {
    xsensdeviceapiPINVOKE.XsMatrix_setZero(swigCPtr);
  }

  public uint offset(uint row, uint column) {
    uint ret = xsensdeviceapiPINVOKE.XsMatrix_offset(swigCPtr, row, column);
    return ret;
  }

  public double value(uint row, uint column) {
    double ret = xsensdeviceapiPINVOKE.XsMatrix_value(swigCPtr, row, column);
    return ret;
  }

  public void setValue(uint row, uint column, double value) {
    xsensdeviceapiPINVOKE.XsMatrix_setValue(swigCPtr, row, column, value);
  }

  public XsMatrix fromQuaternion(XsQuaternion quat) {
    XsMatrix ret = new XsMatrix(xsensdeviceapiPINVOKE.XsMatrix_fromQuaternion(swigCPtr, XsQuaternion.getCPtr(quat)), false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void zero() {
    xsensdeviceapiPINVOKE.XsMatrix_zero(swigCPtr);
  }

  public uint rows() {
    uint ret = xsensdeviceapiPINVOKE.XsMatrix_rows(swigCPtr);
    return ret;
  }

  public uint cols() {
    uint ret = xsensdeviceapiPINVOKE.XsMatrix_cols(swigCPtr);
    return ret;
  }

  public uint stride() {
    uint ret = xsensdeviceapiPINVOKE.XsMatrix_stride(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_double data() {
    global::System.IntPtr cPtr = xsensdeviceapiPINVOKE.XsMatrix_data(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public bool isEqual(XsMatrix other, double tolerance) {
    bool ret = xsensdeviceapiPINVOKE.XsMatrix_isEqual(swigCPtr, XsMatrix.getCPtr(other), tolerance);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void swap(XsMatrix b) {
    xsensdeviceapiPINVOKE.XsMatrix_swap(swigCPtr, XsMatrix.getCPtr(b));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
